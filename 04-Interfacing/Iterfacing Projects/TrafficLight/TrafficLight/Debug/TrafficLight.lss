
TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a6  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000579  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define DELAY 500


int main(void)
{
    DDRC = 0b00001111;		// 7Seg Pins as OUTPUT
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000111;		// LED Pins as OUTPUT
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;	
  74:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;	
  76:	12 ba       	out	0x12, r1	; 18
    while (1) 
    {
		PORTD = 0b00000001;						// RED LED ON
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	82 bb       	out	0x12, r24	; 18
		for(int i=0; i<10; i++){PORTC = i; _delay_ms(DELAY);}	// Count 10 Seconds
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0b c0       	rjmp	.+22     	; 0x98 <main+0x2c>
  82:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	39 e6       	ldi	r19, 0x69	; 105
  88:	48 e1       	ldi	r20, 0x18	; 24
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	40 40       	sbci	r20, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	8a 30       	cpi	r24, 0x0A	; 10
  9a:	91 05       	cpc	r25, r1
  9c:	94 f3       	brlt	.-28     	; 0x82 <main+0x16>
		
		PORTD = 0b00000010;						// RED LED ON
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	82 bb       	out	0x12, r24	; 18
		for(int i=0; i<3; i++){PORTC = i; _delay_ms(DELAY);}	// Count 3 Seconds
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0b c0       	rjmp	.+22     	; 0xbe <main+0x52>
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	39 e6       	ldi	r19, 0x69	; 105
  ae:	48 e1       	ldi	r20, 0x18	; 24
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	40 40       	sbci	r20, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	91 05       	cpc	r25, r1
  c2:	94 f3       	brlt	.-28     	; 0xa8 <main+0x3c>
		
		PORTD = 0b00000100;						// RED LED ON
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	82 bb       	out	0x12, r24	; 18
		for(int i=0; i <10; i++){PORTC = i; _delay_ms(DELAY);}	// Count 10 Seconds
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <main+0x78>
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	39 e6       	ldi	r19, 0x69	; 105
  d4:	48 e1       	ldi	r20, 0x18	; 24
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	40 40       	sbci	r20, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x6a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x74>
  e0:	00 00       	nop
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	8a 30       	cpi	r24, 0x0A	; 10
  e6:	91 05       	cpc	r25, r1
  e8:	94 f3       	brlt	.-28     	; 0xce <main+0x62>
  ea:	c6 cf       	rjmp	.-116    	; 0x78 <main+0xc>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
