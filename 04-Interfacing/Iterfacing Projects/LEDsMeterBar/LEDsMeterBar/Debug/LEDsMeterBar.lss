
LEDsMeterBar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f9  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000939  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  00000ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000174  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define DELAY 100


int main(void)
{
    DDRC = 0xFF;	DDRD = 0xFF;	// Set PORTC & PORTD as OUTPUT
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
  70:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;	PORTD = 0x00;	// Init PORTC & PORTD to LOW
  72:	15 ba       	out	0x15, r1	; 21
  74:	12 ba       	out	0x12, r1	; 18
    while (1) 
    {
		// Light LEDs in one Direction 
		for(int i =0; i<8; i++){			// PORTD
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	16 c0       	rjmp	.+44     	; 0xa8 <main+0x3c>
			PORTD |= (128 >> i);
  7c:	42 b3       	in	r20, 0x12	; 18
  7e:	80 e8       	ldi	r24, 0x80	; 128
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	02 2e       	mov	r0, r18
  84:	02 c0       	rjmp	.+4      	; 0x8a <main+0x1e>
  86:	95 95       	asr	r25
  88:	87 95       	ror	r24
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <main+0x1a>
  8e:	84 2b       	or	r24, r20
  90:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	4f ef       	ldi	r20, 0xFF	; 255
  94:	81 ee       	ldi	r24, 0xE1	; 225
  96:	94 e0       	ldi	r25, 0x04	; 4
  98:	41 50       	subi	r20, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
    DDRC = 0xFF;	DDRD = 0xFF;	// Set PORTC & PORTD as OUTPUT
	PORTC = 0x00;	PORTD = 0x00;	// Init PORTC & PORTD to LOW
    while (1) 
    {
		// Light LEDs in one Direction 
		for(int i =0; i<8; i++){			// PORTD
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
  a8:	28 30       	cpi	r18, 0x08	; 8
  aa:	31 05       	cpc	r19, r1
  ac:	3c f3       	brlt	.-50     	; 0x7c <main+0x10>
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	16 c0       	rjmp	.+44     	; 0xe0 <main+0x74>
			PORTD |= (128 >> i);
			_delay_ms(DELAY);
		}
		for(int i =0; i<8; i++){			// PORTC
			PORTC |= (128 >> i);
  b4:	45 b3       	in	r20, 0x15	; 21
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 2e       	mov	r0, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x56>
  be:	95 95       	asr	r25
  c0:	87 95       	ror	r24
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <main+0x52>
  c6:	84 2b       	or	r24, r20
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	81 ee       	ldi	r24, 0xE1	; 225
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	41 50       	subi	r20, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
		// Light LEDs in one Direction 
		for(int i =0; i<8; i++){			// PORTD
			PORTD |= (128 >> i);
			_delay_ms(DELAY);
		}
		for(int i =0; i<8; i++){			// PORTC
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	28 30       	cpi	r18, 0x08	; 8
  e2:	31 05       	cpc	r19, r1
  e4:	3c f3       	brlt	.-50     	; 0xb4 <main+0x48>
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	17 c0       	rjmp	.+46     	; 0x11a <main+0xae>
			PORTC |= (128 >> i);
			_delay_ms(DELAY);
		}
		// Die Down
		for(int i =0; i<8; i++){			// PORTC 
			PORTC &= ~( 1 << i);
  ec:	45 b3       	in	r20, 0x15	; 21
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <main+0x8a>
  fe:	80 95       	com	r24
 100:	84 23       	and	r24, r20
 102:	85 bb       	out	0x15, r24	; 21
 104:	4f ef       	ldi	r20, 0xFF	; 255
 106:	81 ee       	ldi	r24, 0xE1	; 225
 108:	94 e0       	ldi	r25, 0x04	; 4
 10a:	41 50       	subi	r20, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x9e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0xa8>
 114:	00 00       	nop
		for(int i =0; i<8; i++){			// PORTC
			PORTC |= (128 >> i);
			_delay_ms(DELAY);
		}
		// Die Down
		for(int i =0; i<8; i++){			// PORTC 
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	28 30       	cpi	r18, 0x08	; 8
 11c:	31 05       	cpc	r19, r1
 11e:	34 f3       	brlt	.-52     	; 0xec <main+0x80>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	17 c0       	rjmp	.+46     	; 0x154 <main+0xe8>
			PORTC &= ~( 1 << i);
			_delay_ms(DELAY);
		}
		for(int i =0; i<8; i++){			// PORTD
			PORTD &= ~( 1 << i);
 126:	42 b3       	in	r20, 0x12	; 18
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 2e       	mov	r0, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0xc8>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <main+0xc4>
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	82 bb       	out	0x12, r24	; 18
 13e:	4f ef       	ldi	r20, 0xFF	; 255
 140:	81 ee       	ldi	r24, 0xE1	; 225
 142:	94 e0       	ldi	r25, 0x04	; 4
 144:	41 50       	subi	r20, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xd8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xe2>
 14e:	00 00       	nop
		// Die Down
		for(int i =0; i<8; i++){			// PORTC 
			PORTC &= ~( 1 << i);
			_delay_ms(DELAY);
		}
		for(int i =0; i<8; i++){			// PORTD
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	28 30       	cpi	r18, 0x08	; 8
 156:	31 05       	cpc	r19, r1
 158:	34 f3       	brlt	.-52     	; 0x126 <main+0xba>
 15a:	8d cf       	rjmp	.-230    	; 0x76 <main+0xa>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
