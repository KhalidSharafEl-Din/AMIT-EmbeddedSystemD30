
UART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097d  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  00000cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053d  00000000  00000000  0000141f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049f  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000333  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_13>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 44 00 	call	0x88	; 0x88 <main>
  74:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_VoidInit>:
	functions definition
*/

void DIO_VoidInit(void)
{
	DDRA = DIO_u8_PORTA_DIR;
  7c:	1a ba       	out	0x1a, r1	; 26
	DDRB = DIO_u8_PORTB_DIR;
  7e:	17 ba       	out	0x17, r1	; 23
	DDRC = DIO_u8_PORTC_DIR;
  80:	14 ba       	out	0x14, r1	; 20
	DDRD = DIO_u8_PORTD_DIR;
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	81 bb       	out	0x11, r24	; 17
  86:	08 95       	ret

00000088 <main>:

// Send code

int main ()
{
 DIO_VoidInit();
  88:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VoidInit>
 UART_voidInit();
  8c:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_voidInit>

 while(1)
 {
	UART_voidSendByte('A');
  90:	81 e4       	ldi	r24, 0x41	; 65
  92:	0e 94 89 00 	call	0x112	; 0x112 <UART_voidSendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x14>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x1e>
  a6:	00 00       	nop
	_delay_ms(1000);

	UART_voidSendByte('B');
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	0e 94 89 00 	call	0x112	; 0x112 <UART_voidSendByte>
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x2c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x36>
  be:	00 00       	nop
  c0:	e7 cf       	rjmp	.-50     	; 0x90 <main+0x8>

000000c2 <UART_voidInit>:
{

	while(GET_BIT(UCSRA , RXC) == 0);
	return UDR ;

}
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	80 b5       	in	r24, 0x20	; 32
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	80 bd       	out	0x20, r24	; 32
  ce:	80 b5       	in	r24, 0x20	; 32
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 bd       	out	0x20, r24	; 32
  d4:	80 b5       	in	r24, 0x20	; 32
  d6:	8f 7b       	andi	r24, 0xBF	; 191
  d8:	80 bd       	out	0x20, r24	; 32
  da:	80 b5       	in	r24, 0x20	; 32
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	80 bd       	out	0x20, r24	; 32
  e0:	80 b5       	in	r24, 0x20	; 32
  e2:	8f 7e       	andi	r24, 0xEF	; 239
  e4:	80 bd       	out	0x20, r24	; 32
  e6:	80 b5       	in	r24, 0x20	; 32
  e8:	87 7f       	andi	r24, 0xF7	; 247
  ea:	80 bd       	out	0x20, r24	; 32
  ec:	80 b5       	in	r24, 0x20	; 32
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	80 bd       	out	0x20, r24	; 32
  f2:	10 bc       	out	0x20, r1	; 32
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	89 b9       	out	0x09, r24	; 9
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	80 61       	ori	r24, 0x10	; 16
  fc:	8a b9       	out	0x0a, r24	; 10
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	88 60       	ori	r24, 0x08	; 8
 102:	8a b9       	out	0x0a, r24	; 10
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	8a b9       	out	0x0a, r24	; 10
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	8f 7d       	andi	r24, 0xDF	; 223
 10e:	8a b9       	out	0x0a, r24	; 10
 110:	08 95       	ret

00000112 <UART_voidSendByte>:
 112:	5d 9b       	sbis	0x0b, 5	; 11
 114:	fe cf       	rjmp	.-4      	; 0x112 <UART_voidSendByte>
 116:	8c b9       	out	0x0c, r24	; 12
 118:	08 95       	ret

0000011a <__vector_13>:


void __vector_13(void) __attribute__((signal , used));
void __vector_13(void)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	CallBackReceive();
 13c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 140:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <_edata+0x1>
 144:	09 95       	icall
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_14>:

void __vector_14(void) __attribute__((signal , used));
void __vector_14(void)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	CallBackSend();
 18a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <CallBackSend>
 18e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <CallBackSend+0x1>
 192:	09 95       	icall
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
