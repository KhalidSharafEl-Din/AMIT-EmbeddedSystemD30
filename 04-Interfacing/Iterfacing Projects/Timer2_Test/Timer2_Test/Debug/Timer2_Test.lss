
Timer2_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000030e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8a  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080c  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074b  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000639  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e9  00000000  00000000  000029d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00002ec2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_10>
  2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_enable>:

void ADC_enableInterrupt(){
    SET_BIT(ADCSRA, ADIE);
}
void ADC_desabileInterrupt(){
    CLEAR_BIT(ADCSRA, ADIE);
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	86 b9       	out	0x06, r24	; 6
  82:	08 95       	ret

00000084 <ADC_vrefSelect>:
  84:	97 b1       	in	r25, 0x07	; 7
  86:	9f 73       	andi	r25, 0x3F	; 63
  88:	97 b9       	out	0x07, r25	; 7
  8a:	27 b1       	in	r18, 0x07	; 7
  8c:	30 e4       	ldi	r19, 0x40	; 64
  8e:	83 9f       	mul	r24, r19
  90:	c0 01       	movw	r24, r0
  92:	11 24       	eor	r1, r1
  94:	82 2b       	or	r24, r18
  96:	87 b9       	out	0x07, r24	; 7
  98:	08 95       	ret

0000009a <ADC_setReslution>:
  9a:	97 b1       	in	r25, 0x07	; 7
  9c:	9f 7d       	andi	r25, 0xDF	; 223
  9e:	97 b9       	out	0x07, r25	; 7
  a0:	27 b1       	in	r18, 0x07	; 7
  a2:	30 e2       	ldi	r19, 0x20	; 32
  a4:	83 9f       	mul	r24, r19
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1
  aa:	82 2b       	or	r24, r18
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	08 95       	ret

000000b0 <ADC_setPrescaler>:
  b0:	96 b1       	in	r25, 0x06	; 6
  b2:	98 7f       	andi	r25, 0xF8	; 248
  b4:	96 b9       	out	0x06, r25	; 6
  b6:	96 b1       	in	r25, 0x06	; 6
  b8:	89 2b       	or	r24, r25
  ba:	86 b9       	out	0x06, r24	; 6
  bc:	08 95       	ret

000000be <ADC_desaibleAutoTrigger>:
  be:	86 b1       	in	r24, 0x06	; 6
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	86 b9       	out	0x06, r24	; 6
  c4:	08 95       	ret

000000c6 <ADC_init>:
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 42 00 	call	0x84	; 0x84 <ADC_vrefSelect>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 4d 00 	call	0x9a	; 0x9a <ADC_setReslution>
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_setPrescaler>
  d8:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_desaibleAutoTrigger>
  dc:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_enable>
  e0:	08 95       	ret

000000e2 <ADC_analogRead>:


#if ADC_RESLUTION == ADC_8BIT_RESELUTION
u8  ADC_analogRead(u8 Channel){
    // Select required channel 
    CLEAR_BIT(ADCSRA, ADSC);
  e2:	96 b1       	in	r25, 0x06	; 6
  e4:	9f 7b       	andi	r25, 0xBF	; 191
  e6:	96 b9       	out	0x06, r25	; 6
    ADMUX &= 0b11100000;        // Clear Required Bits 
  e8:	97 b1       	in	r25, 0x07	; 7
  ea:	90 7e       	andi	r25, 0xE0	; 224
  ec:	97 b9       	out	0x07, r25	; 7
    ADMUX |= Channel;           // Set the new value
  ee:	97 b1       	in	r25, 0x07	; 7
  f0:	89 2b       	or	r24, r25
  f2:	87 b9       	out	0x07, r24	; 7
    // Start Conversion
    SET_BIT(ADCSRA, ADSC); 
  f4:	86 b1       	in	r24, 0x06	; 6
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	86 b9       	out	0x06, r24	; 6
    // Wait till conversion finish
    while ((CHECK_BIT(ADCSRA, ADSC)) == 1);
  fa:	36 99       	sbic	0x06, 6	; 6
  fc:	fe cf       	rjmp	.-4      	; 0xfa <ADC_analogRead+0x18>
    return ADCH;
  fe:	85 b1       	in	r24, 0x05	; 5
}
 100:	08 95       	ret

00000102 <DIO_VoidInit>:
#include "DIO_interface.h"


void DIO_VoidInit(void){
    // Sit the Pin dirction according to the configration file 
    DDRA = DIO_u8_PORTA_DIR;
 102:	1a ba       	out	0x1a, r1	; 26
    DDRB = DIO_u8_PORTB_DIR;
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	87 bb       	out	0x17, r24	; 23
    DDRC = DIO_u8_PORTC_DIR;
 108:	14 ba       	out	0x14, r1	; 20
    DDRD = DIO_u8_PORTD_DIR;
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	81 bb       	out	0x11, r24	; 17
 10e:	08 95       	ret

00000110 <main>:
void isr(void){
	TIMER2_SetCompare(150);
}
int main(void)
{
	TIMER2_init();
 110:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <TIMER2_init>
	DIO_VoidInit();
 114:	0e 94 81 00 	call	0x102	; 0x102 <DIO_VoidInit>
	ADC_init();
 118:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_init>
	u8 digital;
    while (1) 
    {	
			TIMER2_SetCompare(ADC_analogRead(1));
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_analogRead>
 122:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TIMER2_SetCompare>
 126:	fa cf       	rjmp	.-12     	; 0x11c <main+0xc>

00000128 <TIMER2_setMode>:
    TIMER_2_OV_CallBack = fun_ptr;
}

void TIMER2_SetCTC_CallBack(void (*fun_ptr) (void)){
   
    TIMER_2_CTC_CallBack = fun_ptr;
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	69 f0       	breq	.+26     	; 0x146 <TIMER2_setMode+0x1e>
 12c:	28 f0       	brcs	.+10     	; 0x138 <TIMER2_setMode+0x10>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	89 f0       	breq	.+34     	; 0x154 <TIMER2_setMode+0x2c>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	b1 f0       	breq	.+44     	; 0x162 <TIMER2_setMode+0x3a>
 136:	08 95       	ret
 138:	85 b5       	in	r24, 0x25	; 37
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	85 bd       	out	0x25, r24	; 37
 13e:	85 b5       	in	r24, 0x25	; 37
 140:	87 7f       	andi	r24, 0xF7	; 247
 142:	85 bd       	out	0x25, r24	; 37
 144:	08 95       	ret
 146:	85 b5       	in	r24, 0x25	; 37
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	85 bd       	out	0x25, r24	; 37
 14c:	85 b5       	in	r24, 0x25	; 37
 14e:	87 7f       	andi	r24, 0xF7	; 247
 150:	85 bd       	out	0x25, r24	; 37
 152:	08 95       	ret
 154:	85 b5       	in	r24, 0x25	; 37
 156:	8f 7b       	andi	r24, 0xBF	; 191
 158:	85 bd       	out	0x25, r24	; 37
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	85 bd       	out	0x25, r24	; 37
 160:	08 95       	ret
 162:	85 b5       	in	r24, 0x25	; 37
 164:	80 64       	ori	r24, 0x40	; 64
 166:	85 bd       	out	0x25, r24	; 37
 168:	85 b5       	in	r24, 0x25	; 37
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	85 bd       	out	0x25, r24	; 37
 16e:	08 95       	ret

00000170 <TIMER2_setTE>:
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	69 f0       	breq	.+26     	; 0x18e <TIMER2_setTE+0x1e>
 174:	28 f0       	brcs	.+10     	; 0x180 <TIMER2_setTE+0x10>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	89 f0       	breq	.+34     	; 0x19c <TIMER2_setTE+0x2c>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	b1 f0       	breq	.+44     	; 0x1aa <TIMER2_setTE+0x3a>
 17e:	08 95       	ret
 180:	85 b5       	in	r24, 0x25	; 37
 182:	8f 7e       	andi	r24, 0xEF	; 239
 184:	85 bd       	out	0x25, r24	; 37
 186:	85 b5       	in	r24, 0x25	; 37
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	85 bd       	out	0x25, r24	; 37
 18c:	08 95       	ret
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	80 61       	ori	r24, 0x10	; 16
 192:	85 bd       	out	0x25, r24	; 37
 194:	85 b5       	in	r24, 0x25	; 37
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	85 bd       	out	0x25, r24	; 37
 19a:	08 95       	ret
 19c:	85 b5       	in	r24, 0x25	; 37
 19e:	8f 7e       	andi	r24, 0xEF	; 239
 1a0:	85 bd       	out	0x25, r24	; 37
 1a2:	85 b5       	in	r24, 0x25	; 37
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	85 bd       	out	0x25, r24	; 37
 1a8:	08 95       	ret
 1aa:	85 b5       	in	r24, 0x25	; 37
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	85 bd       	out	0x25, r24	; 37
 1b0:	85 b5       	in	r24, 0x25	; 37
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	85 bd       	out	0x25, r24	; 37
 1b6:	08 95       	ret

000001b8 <TIMER2_setPrescaler>:
 1b8:	95 b5       	in	r25, 0x25	; 37
 1ba:	98 7f       	andi	r25, 0xF8	; 248
 1bc:	95 bd       	out	0x25, r25	; 37
 1be:	95 b5       	in	r25, 0x25	; 37
 1c0:	89 2b       	or	r24, r25
 1c2:	85 bd       	out	0x25, r24	; 37
 1c4:	08 95       	ret

000001c6 <TIMER2_init>:
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 94 00 	call	0x128	; 0x128 <TIMER2_setMode>
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <TIMER2_setPrescaler>
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 b8 00 	call	0x170	; 0x170 <TIMER2_setTE>
 1d8:	89 b7       	in	r24, 0x39	; 57
 1da:	8f 77       	andi	r24, 0x7F	; 127
 1dc:	89 bf       	out	0x39, r24	; 57
 1de:	89 b7       	in	r24, 0x39	; 57
 1e0:	8f 7b       	andi	r24, 0xBF	; 191
 1e2:	89 bf       	out	0x39, r24	; 57
 1e4:	88 b7       	in	r24, 0x38	; 56
 1e6:	8f 77       	andi	r24, 0x7F	; 127
 1e8:	88 bf       	out	0x38, r24	; 56
 1ea:	88 b7       	in	r24, 0x38	; 56
 1ec:	8f 7b       	andi	r24, 0xBF	; 191
 1ee:	88 bf       	out	0x38, r24	; 56
 1f0:	14 bc       	out	0x24, r1	; 36
 1f2:	13 bc       	out	0x23, r1	; 35
 1f4:	08 95       	ret

000001f6 <TIMER2_SetCompare>:
 1f6:	83 bd       	out	0x23, r24	; 35
 1f8:	08 95       	ret

000001fa <__vector_11>:
}


void __vector_11(void) __attribute__((signal , used));
void __vector_11(void)
{
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	TIMER_2_OV_CallBack();
 21c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <TIMER_2_OV_CallBack>
 220:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <TIMER_2_OV_CallBack+0x1>
 224:	09 95       	icall
}
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_10>:

void __vector_10(void) __attribute__((signal , used));
void __vector_10(void)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	4f 93       	push	r20
 258:	5f 93       	push	r21
 25a:	6f 93       	push	r22
 25c:	7f 93       	push	r23
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
	TIMER_2_CTC_CallBack();
 26a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 26e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 272:	09 95       	icall
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
