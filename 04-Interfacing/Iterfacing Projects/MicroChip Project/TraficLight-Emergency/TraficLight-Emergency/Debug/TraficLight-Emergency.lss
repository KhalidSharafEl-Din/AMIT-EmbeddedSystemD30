
TraficLight-Emergency.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070d  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d0  00000000  00000000  00000991  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000337  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000378  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018d  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  74:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
#include <avr/interrupt.h>
#define DELAY 100

int emergency = 0;

ISR (INT1_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	emergency =1;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <main>:

int main(void)
{
    DDRC	= 0b00001111;		// 7Seg Pins as OUTPUT
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	84 bb       	out	0x14, r24	; 20
	DDRD	= 0b00000111;		// LED Pins as OUTPUT
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	81 bb       	out	0x11, r24	; 17
	PORTC	= 0x00;	
  ac:	15 ba       	out	0x15, r1	; 21
	PORTD	= 0b0001000;		// Setting the LEDs To LOW and the Button To PULLUP	
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	82 bb       	out	0x12, r24	; 18
	
	GICR =0x80;					// Enable External interrupt INT1
  b2:	90 e8       	ldi	r25, 0x80	; 128
  b4:	9b bf       	out	0x3b, r25	; 59
	MCUCR =0x08;				// INT1 Falling Edge interrupt
  b6:	85 bf       	out	0x35, r24	; 53
	sei();						// Enable Global interrupts
  b8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	31 ee       	ldi	r19, 0xE1	; 225
  be:	44 e0       	ldi	r20, 0x04	; 4
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x1c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x26>
  ca:	00 00       	nop
	_delay_ms(DELAY);
    while (1) 
    {
		PORTD |= (1 << 0); 	PORTD &= ~(1 << 2);					// RED LED ON
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	82 bb       	out	0x12, r24	; 18
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8b 7f       	andi	r24, 0xFB	; 251
  d6:	82 bb       	out	0x12, r24	; 18
		for(int i=0; i<10; i++){
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	11 c0       	rjmp	.+34     	; 0x100 <main+0x5c>
			if(emergency !=0) {break;}							
  de:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	23 2b       	or	r18, r19
  e8:	71 f4       	brne	.+28     	; 0x106 <main+0x62>
			PORTC = i; _delay_ms(DELAY);
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	31 ee       	ldi	r19, 0xE1	; 225
  f0:	44 e0       	ldi	r20, 0x04	; 4
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x4e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x58>
  fc:	00 00       	nop
	sei();						// Enable Global interrupts
	_delay_ms(DELAY);
    while (1) 
    {
		PORTD |= (1 << 0); 	PORTD &= ~(1 << 2);					// RED LED ON
		for(int i=0; i<10; i++){
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	8a 30       	cpi	r24, 0x0A	; 10
 102:	91 05       	cpc	r25, r1
 104:	64 f3       	brlt	.-40     	; 0xde <main+0x3a>
			if(emergency !=0) {break;}							
			PORTC = i; _delay_ms(DELAY);
			}	// Count 10 Seconds
		
		PORTD |= (1 << 1); 	PORTD &= ~(1 << 0);				  // YELLOW LED ON
 106:	82 b3       	in	r24, 0x12	; 18
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	82 bb       	out	0x12, r24	; 18
		for(int i=0; i<3; i++){
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	11 c0       	rjmp	.+34     	; 0x13a <main+0x96>
			if(emergency != 0) {break;}
 118:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 120:	23 2b       	or	r18, r19
 122:	71 f4       	brne	.+28     	; 0x140 <main+0x9c>
			PORTC = i; _delay_ms(DELAY);
 124:	85 bb       	out	0x15, r24	; 21
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	31 ee       	ldi	r19, 0xE1	; 225
 12a:	44 e0       	ldi	r20, 0x04	; 4
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	40 40       	sbci	r20, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x88>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x92>
 136:	00 00       	nop
			if(emergency !=0) {break;}							
			PORTC = i; _delay_ms(DELAY);
			}	// Count 10 Seconds
		
		PORTD |= (1 << 1); 	PORTD &= ~(1 << 0);				  // YELLOW LED ON
		for(int i=0; i<3; i++){
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	91 05       	cpc	r25, r1
 13e:	64 f3       	brlt	.-40     	; 0x118 <main+0x74>
			if(emergency != 0) {break;}
			PORTC = i; _delay_ms(DELAY);
			}	// Count 3 Seconds
		
		PORTD |= (1 << 2); 	PORTD &= ~(1 << 1);				    // GREEN LED ON
 140:	82 b3       	in	r24, 0x12	; 18
 142:	84 60       	ori	r24, 0x04	; 4
 144:	82 bb       	out	0x12, r24	; 18
 146:	82 b3       	in	r24, 0x12	; 18
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	82 bb       	out	0x12, r24	; 18
		for(int i=0; i <10; i++){PORTC = i; _delay_ms(DELAY);}	// Count 10 Seconds
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0b c0       	rjmp	.+22     	; 0x168 <main+0xc4>
 152:	85 bb       	out	0x15, r24	; 21
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	31 ee       	ldi	r19, 0xE1	; 225
 158:	44 e0       	ldi	r20, 0x04	; 4
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	40 40       	sbci	r20, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xb6>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xc0>
 164:	00 00       	nop
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	91 05       	cpc	r25, r1
 16c:	94 f3       	brlt	.-28     	; 0x152 <main+0xae>
		emergency=0;
 16e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 172:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
	}
 176:	aa cf       	rjmp	.-172    	; 0xcc <main+0x28>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
