
LCD_Task_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000005e6  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000a2  008000a2  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001585  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00001dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098e  00000000  00000000  00002617  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e1  00000000  00000000  0000377a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000415b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 02 	call	0x438	; 0x438 <main>
  8a:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VoidInit>:
    default:
        // error
        return DIO_u8_ERROR;
    }

}
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
  96:	8e e0       	ldi	r24, 0x0E	; 14
  98:	87 bb       	out	0x17, r24	; 23
  9a:	14 ba       	out	0x14, r1	; 20
  9c:	11 ba       	out	0x11, r1	; 17
  9e:	08 95       	ret

000000a0 <DIO_VoidSetPinValue>:
  a0:	86 30       	cpi	r24, 0x06	; 6
  a2:	29 f1       	breq	.+74     	; 0xee <DIO_VoidSetPinValue+0x4e>
  a4:	18 f4       	brcc	.+6      	; 0xac <DIO_VoidSetPinValue+0xc>
  a6:	85 30       	cpi	r24, 0x05	; 5
  a8:	39 f0       	breq	.+14     	; 0xb8 <DIO_VoidSetPinValue+0x18>
  aa:	08 95       	ret
  ac:	87 30       	cpi	r24, 0x07	; 7
  ae:	d1 f1       	breq	.+116    	; 0x124 <DIO_VoidSetPinValue+0x84>
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_VoidSetPinValue+0x16>
  b4:	52 c0       	rjmp	.+164    	; 0x15a <DIO_VoidSetPinValue+0xba>
  b6:	08 95       	ret
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	59 f4       	brne	.+22     	; 0xd2 <DIO_VoidSetPinValue+0x32>
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_VoidSetPinValue+0x28>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_VoidSetPinValue+0x24>
  cc:	82 2b       	or	r24, r18
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	08 95       	ret
  d2:	41 11       	cpse	r20, r1
  d4:	5c c0       	rjmp	.+184    	; 0x18e <DIO_VoidSetPinValue+0xee>
  d6:	2b b3       	in	r18, 0x1b	; 27
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_VoidSetPinValue+0x42>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_VoidSetPinValue+0x3e>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	08 95       	ret
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	59 f4       	brne	.+22     	; 0x108 <DIO_VoidSetPinValue+0x68>
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_VoidSetPinValue+0x5e>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_VoidSetPinValue+0x5a>
 102:	82 2b       	or	r24, r18
 104:	88 bb       	out	0x18, r24	; 24
 106:	08 95       	ret
 108:	41 11       	cpse	r20, r1
 10a:	41 c0       	rjmp	.+130    	; 0x18e <DIO_VoidSetPinValue+0xee>
 10c:	28 b3       	in	r18, 0x18	; 24
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_VoidSetPinValue+0x78>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_VoidSetPinValue+0x74>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	88 bb       	out	0x18, r24	; 24
 122:	08 95       	ret
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <DIO_VoidSetPinValue+0x9e>
 128:	25 b3       	in	r18, 0x15	; 21
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_VoidSetPinValue+0x94>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_VoidSetPinValue+0x90>
 138:	82 2b       	or	r24, r18
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	08 95       	ret
 13e:	41 11       	cpse	r20, r1
 140:	26 c0       	rjmp	.+76     	; 0x18e <DIO_VoidSetPinValue+0xee>
 142:	25 b3       	in	r18, 0x15	; 21
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_VoidSetPinValue+0xae>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_VoidSetPinValue+0xaa>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 bb       	out	0x15, r24	; 21
 158:	08 95       	ret
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	59 f4       	brne	.+22     	; 0x174 <DIO_VoidSetPinValue+0xd4>
 15e:	22 b3       	in	r18, 0x12	; 18
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_VoidSetPinValue+0xca>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_VoidSetPinValue+0xc6>
 16e:	82 2b       	or	r24, r18
 170:	82 bb       	out	0x12, r24	; 18
 172:	08 95       	ret
 174:	41 11       	cpse	r20, r1
 176:	0b c0       	rjmp	.+22     	; 0x18e <DIO_VoidSetPinValue+0xee>
 178:	22 b3       	in	r18, 0x12	; 18
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_VoidSetPinValue+0xe4>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_VoidSetPinValue+0xe0>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	08 95       	ret

00000190 <DIO_VoidSetPortValue>:


void DIO_VoidSetPortValue(u8 DIO_u8_PORT, u8 DIO_u8Val){

    switch (DIO_u8_PORT){
 190:	86 30       	cpi	r24, 0x06	; 6
 192:	59 f0       	breq	.+22     	; 0x1aa <DIO_VoidSetPortValue+0x1a>
 194:	18 f4       	brcc	.+6      	; 0x19c <DIO_VoidSetPortValue+0xc>
 196:	85 30       	cpi	r24, 0x05	; 5
 198:	31 f0       	breq	.+12     	; 0x1a6 <DIO_VoidSetPortValue+0x16>
 19a:	08 95       	ret
 19c:	87 30       	cpi	r24, 0x07	; 7
 19e:	39 f0       	breq	.+14     	; 0x1ae <DIO_VoidSetPortValue+0x1e>
 1a0:	88 30       	cpi	r24, 0x08	; 8
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <DIO_VoidSetPortValue+0x22>
 1a4:	08 95       	ret
        case DIO_u8_PORTA:
            ASSIGN_PORT(PORTA, DIO_u8Val);
 1a6:	6b bb       	out	0x1b, r22	; 27
            break;
 1a8:	08 95       	ret
        case DIO_u8_PORTB:
            ASSIGN_PORT(PORTB, DIO_u8Val);
 1aa:	68 bb       	out	0x18, r22	; 24
            break;
 1ac:	08 95       	ret
        case DIO_u8_PORTC:
            ASSIGN_PORT(PORTB, DIO_u8Val);
 1ae:	68 bb       	out	0x18, r22	; 24
            break;
 1b0:	08 95       	ret
        case DIO_u8_PORTD:
            ASSIGN_PORT(PORTD, DIO_u8Val);
 1b2:	62 bb       	out	0x12, r22	; 18
 1b4:	08 95       	ret

000001b6 <LCD_SendData>:
void LCD_ScrollLeft(){
	LCD_SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
}

void LCD_ScrollRight(){
	LCD_SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1ce:	6c 2f       	mov	r22, r28
 1d0:	60 7f       	andi	r22, 0xF0	; 240
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_SendData+0x30>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_SendData+0x36>
 1ec:	00 00       	nop
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	63 e0       	ldi	r22, 0x03	; 3
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_SendData+0x46>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_SendData+0x4c>
 202:	00 00       	nop
 204:	6c 2f       	mov	r22, r28
 206:	62 95       	swap	r22
 208:	60 7f       	andi	r22, 0xF0	; 240
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	63 e0       	ldi	r22, 0x03	; 3
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_SendData+0x68>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_SendData+0x6e>
 224:	00 00       	nop
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 230:	8f e9       	ldi	r24, 0x9F	; 159
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_SendData+0x7e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_SendData+0x84>
 23a:	00 00       	nop
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <LCD_SendCommand>:
 240:	cf 93       	push	r28
 242:	c8 2f       	mov	r28, r24
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 258:	6c 2f       	mov	r22, r28
 25a:	60 7f       	andi	r22, 0xF0	; 240
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_SendCommand+0x30>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_SendCommand+0x36>
 276:	00 00       	nop
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	63 e0       	ldi	r22, 0x03	; 3
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_SendCommand+0x46>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_SendCommand+0x4c>
 28c:	00 00       	nop
 28e:	6c 2f       	mov	r22, r28
 290:	62 95       	swap	r22
 292:	60 7f       	andi	r22, 0xF0	; 240
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 2a4:	8f e9       	ldi	r24, 0x9F	; 159
 2a6:	9f e0       	ldi	r25, 0x0F	; 15
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_SendCommand+0x68>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_SendCommand+0x6e>
 2ae:	00 00       	nop
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 2ba:	8f e9       	ldi	r24, 0x9F	; 159
 2bc:	9f e0       	ldi	r25, 0x0F	; 15
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_SendCommand+0x7e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_SendCommand+0x84>
 2c4:	00 00       	nop
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_Init>:
 2ca:	2f e7       	ldi	r18, 0x7F	; 127
 2cc:	85 eb       	ldi	r24, 0xB5	; 181
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <LCD_Init+0x6>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Init+0x10>
 2da:	00 00       	nop
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 2e2:	82 e3       	ldi	r24, 0x32	; 50
 2e4:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 2e8:	88 e2       	ldi	r24, 0x28	; 40
 2ea:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	9f e0       	ldi	r25, 0x0F	; 15
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_Init+0x28>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_Init+0x2e>
 2f8:	00 00       	nop
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 300:	8f e9       	ldi	r24, 0x9F	; 159
 302:	9f e0       	ldi	r25, 0x0F	; 15
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_Init+0x3a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_Init+0x40>
 30a:	00 00       	nop
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 312:	8f e3       	ldi	r24, 0x3F	; 63
 314:	9f e1       	ldi	r25, 0x1F	; 31
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_Init+0x4c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_Init+0x52>
 31c:	00 00       	nop
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 324:	08 95       	ret

00000326 <LCD_ScrollLeft>:
 326:	88 e1       	ldi	r24, 0x18	; 24
 328:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 32c:	08 95       	ret

0000032e <LCD_CursorSet>:
	LCD_CursorSet(x, y);
	LCD_SendData(location);
}


void LCD_CursorSet(u8 col, u8 row){
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	00 d0       	rcall	.+0      	; 0x334 <LCD_CursorSet+0x6>
 334:	00 d0       	rcall	.+0      	; 0x336 <LCD_CursorSet+0x8>
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
	u8 row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 33a:	19 82       	std	Y+1, r1	; 0x01
 33c:	90 e4       	ldi	r25, 0x40	; 64
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	94 e1       	ldi	r25, 0x14	; 20
 342:	9b 83       	std	Y+3, r25	; 0x03
 344:	94 e5       	ldi	r25, 0x54	; 84
 346:	9c 83       	std	Y+4, r25	; 0x04
		if ( row >= _LCD_ROWS)
 348:	62 30       	cpi	r22, 0x02	; 2
 34a:	08 f0       	brcs	.+2      	; 0x34e <LCD_CursorSet+0x20>
			{row = 0;} 
 34c:	60 e0       	ldi	r22, 0x00	; 0
	LCD_Opts.currentX = col;  
 34e:	e2 ea       	ldi	r30, 0xA2	; 162
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	83 83       	std	Z+3, r24	; 0x03
	LCD_Opts.currentY = row;
 354:	64 83       	std	Z+4, r22	; 0x04
	LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 356:	e1 e0       	ldi	r30, 0x01	; 1
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ec 0f       	add	r30, r28
 35c:	fd 1f       	adc	r31, r29
 35e:	e6 0f       	add	r30, r22
 360:	f1 1d       	adc	r31, r1
 362:	90 81       	ld	r25, Z
 364:	89 0f       	add	r24, r25
 366:	80 68       	ori	r24, 0x80	; 128
 368:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <LCD_Puts>:
void LCD_Clear(void){
    LCD_SendCommand(LCD_CLEARDISPLAY);
	_delay_ms(5);
}

void LCD_Puts(u8 x, u8 y, char* str){
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	ea 01       	movw	r28, r20
	LCD_CursorSet(x, y);
 380:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_CursorSet>
	while (*str){
 384:	29 c0       	rjmp	.+82     	; 0x3d8 <LCD_Puts+0x5e>
		if(LCD_Opts.currentX >= _LCD_COLS){
 386:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <__data_end+0x3>
 38a:	80 31       	cpi	r24, 0x10	; 16
 38c:	48 f0       	brcs	.+18     	; 0x3a0 <LCD_Puts+0x26>
			LCD_Opts.currentX = 0;
 38e:	e2 ea       	ldi	r30, 0xA2	; 162
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	13 82       	std	Z+3, r1	; 0x03
			LCD_Opts.currentY++;
 394:	64 81       	ldd	r22, Z+4	; 0x04
 396:	6f 5f       	subi	r22, 0xFF	; 255
 398:	64 83       	std	Z+4, r22	; 0x04
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_CursorSet>
		}
		
		if(*str == '\n'){
 3a0:	88 81       	ld	r24, Y
 3a2:	8a 30       	cpi	r24, 0x0A	; 10
 3a4:	49 f4       	brne	.+18     	; 0x3b8 <LCD_Puts+0x3e>
			LCD_Opts.currentY++;
 3a6:	e2 ea       	ldi	r30, 0xA2	; 162
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	64 81       	ldd	r22, Z+4	; 0x04
 3ac:	6f 5f       	subi	r22, 0xFF	; 255
 3ae:	64 83       	std	Z+4, r22	; 0x04
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 3b0:	83 81       	ldd	r24, Z+3	; 0x03
 3b2:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_CursorSet>
 3b6:	0f c0       	rjmp	.+30     	; 0x3d6 <LCD_Puts+0x5c>
		}else if ( *str == '\r'){
 3b8:	8d 30       	cpi	r24, 0x0D	; 13
 3ba:	31 f4       	brne	.+12     	; 0x3c8 <LCD_Puts+0x4e>
			LCD_CursorSet(0, LCD_Opts.currentY);
 3bc:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <__data_end+0x4>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_CursorSet>
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <LCD_Puts+0x5c>
		}else{
			LCD_SendData(*str);
 3c8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_SendData>
			LCD_Opts.currentX++;
 3cc:	e2 ea       	ldi	r30, 0xA2	; 162
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	83 81       	ldd	r24, Z+3	; 0x03
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	83 83       	std	Z+3, r24	; 0x03
		}
		str++;
 3d6:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(5);
}

void LCD_Puts(u8 x, u8 y, char* str){
	LCD_CursorSet(x, y);
	while (*str){
 3d8:	88 81       	ld	r24, Y
 3da:	81 11       	cpse	r24, r1
 3dc:	d4 cf       	rjmp	.-88     	; 0x386 <LCD_Puts+0xc>
			LCD_SendData(*str);
			LCD_Opts.currentX++;
		}
		str++;
	}
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <LCD_PutCustom>:
	for(i = 0; i < 8; i++){
		LCD_Put(data[i]);
	}
}

void LCD_PutCustom(u8 x, u8 y, u8 location){
 3e4:	cf 93       	push	r28
 3e6:	c4 2f       	mov	r28, r20
	
	LCD_CursorSet(x, y);
 3e8:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_CursorSet>
	LCD_SendData(location);
 3ec:	8c 2f       	mov	r24, r28
 3ee:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_SendData>
}
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <LCD_Put>:
	LCD_Opts.currentY = row;
	LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}

void LCD_Put(u8 Data){
	LCD_SendData(Data);
 3f6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_SendData>
 3fa:	08 95       	ret

000003fc <LCD_CreateChar>:
void LCD_ScrollRight(){
	LCD_SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

//############################################################
void LCD_CreateChar(u8 location, u8* data){
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	8b 01       	movw	r16, r22
	u8 i; 
	location &= 0x07;
 404:	87 70       	andi	r24, 0x07	; 7
	LCD_SendCommand(LCD_SETCGRAMADDR | (location << 3));
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	80 64       	ori	r24, 0x40	; 64
 416:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
	for(i = 0; i < 8; i++){
 41a:	c0 e0       	ldi	r28, 0x00	; 0
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		LCD_Put(data[i]);
 41e:	f8 01       	movw	r30, r16
 420:	ec 0f       	add	r30, r28
 422:	f1 1d       	adc	r31, r1
 424:	80 81       	ld	r24, Z
 426:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_Put>
//############################################################
void LCD_CreateChar(u8 location, u8* data){
	u8 i; 
	location &= 0x07;
	LCD_SendCommand(LCD_SETCGRAMADDR | (location << 3));
	for(i = 0; i < 8; i++){
 42a:	cf 5f       	subi	r28, 0xFF	; 255
 42c:	c8 30       	cpi	r28, 0x08	; 8
 42e:	b8 f3       	brcs	.-18     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		LCD_Put(data[i]);
	}
}
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <main>:
#include "util/delay.h"



int main(void)
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	c0 54       	subi	r28, 0x40	; 64
 442:	d1 09       	sbc	r29, r1
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
	DIO_VoidInit();
 44e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidInit>
	LCD_Init();
 452:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Init>
	
	u8 kha2[] = {0b00000,0b00100,0b00000,0b00110,0b00001,0b11111,0b00000,0b00000};
 456:	88 e0       	ldi	r24, 0x08	; 8
 458:	e0 e6       	ldi	r30, 0x60	; 96
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	de 01       	movw	r26, r28
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	01 90       	ld	r0, Z+
 462:	0d 92       	st	X+, r0
 464:	8a 95       	dec	r24
 466:	e1 f7       	brne	.-8      	; 0x460 <main+0x28>
	u8 geem[] = {0x00,0x00,0x00,0x06,0x01,0x1F,0x00,0x04};
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	e8 e6       	ldi	r30, 0x68	; 104
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	de 01       	movw	r26, r28
 470:	19 96       	adiw	r26, 0x09	; 9
 472:	01 90       	ld	r0, Z+
 474:	0d 92       	st	X+, r0
 476:	8a 95       	dec	r24
 478:	e1 f7       	brne	.-8      	; 0x472 <main+0x3a>
	u8 alef[] = {0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00};
 47a:	88 e0       	ldi	r24, 0x08	; 8
 47c:	e0 e7       	ldi	r30, 0x70	; 112
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	de 01       	movw	r26, r28
 482:	51 96       	adiw	r26, 0x11	; 17
 484:	01 90       	ld	r0, Z+
 486:	0d 92       	st	X+, r0
 488:	8a 95       	dec	r24
 48a:	e1 f7       	brne	.-8      	; 0x484 <main+0x4c>
	u8 lamMid[] = {0x04,0x04,0x04,0x04,0x04,0x1C,0x00,0x00};
 48c:	88 e0       	ldi	r24, 0x08	; 8
 48e:	e8 e7       	ldi	r30, 0x78	; 120
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	de 01       	movw	r26, r28
 494:	59 96       	adiw	r26, 0x19	; 25
 496:	01 90       	ld	r0, Z+
 498:	0d 92       	st	X+, r0
 49a:	8a 95       	dec	r24
 49c:	e1 f7       	brne	.-8      	; 0x496 <main+0x5e>
	u8 lamEnd[] = {0x01,0x01,0x01,0x01,0x11,0x11,0x0A,0x04};
 49e:	88 e0       	ldi	r24, 0x08	; 8
 4a0:	e0 e8       	ldi	r30, 0x80	; 128
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	de 01       	movw	r26, r28
 4a6:	91 96       	adiw	r26, 0x21	; 33
 4a8:	01 90       	ld	r0, Z+
 4aa:	0d 92       	st	X+, r0
 4ac:	8a 95       	dec	r24
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0x70>
	u8 dal[] = {0x00,0x00,0x02,0x02,0x02,0x1F,0x00,0x00};
 4b0:	88 e0       	ldi	r24, 0x08	; 8
 4b2:	e8 e8       	ldi	r30, 0x88	; 136
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	de 01       	movw	r26, r28
 4b8:	99 96       	adiw	r26, 0x29	; 41
 4ba:	01 90       	ld	r0, Z+
 4bc:	0d 92       	st	X+, r0
 4be:	8a 95       	dec	r24
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x82>
	u8 memeMid[] = {0x00,0x00,0x00,0x00,0x00,0x1F,0x0A,0x04};
 4c2:	88 e0       	ldi	r24, 0x08	; 8
 4c4:	e0 e9       	ldi	r30, 0x90	; 144
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	de 01       	movw	r26, r28
 4ca:	d1 96       	adiw	r26, 0x31	; 49
 4cc:	01 90       	ld	r0, Z+
 4ce:	0d 92       	st	X+, r0
 4d0:	8a 95       	dec	r24
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0x94>
	u8 heart[] = {0x00,0x0A,0x1F,0x1F,0x1F,0x0E,0x04,0x00};
 4d4:	88 e0       	ldi	r24, 0x08	; 8
 4d6:	e8 e9       	ldi	r30, 0x98	; 152
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	de 01       	movw	r26, r28
 4dc:	d9 96       	adiw	r26, 0x39	; 57
 4de:	01 90       	ld	r0, Z+
 4e0:	0d 92       	st	X+, r0
 4e2:	8a 95       	dec	r24
 4e4:	e1 f7       	brne	.-8      	; 0x4de <main+0xa6>
	
		
	LCD_CreateChar(0,kha2);
 4e6:	be 01       	movw	r22, r28
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	LCD_CreateChar(1,alef);
 4f2:	be 01       	movw	r22, r28
 4f4:	6f 5e       	subi	r22, 0xEF	; 239
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	LCD_CreateChar(2,lamMid);
 4fe:	be 01       	movw	r22, r28
 500:	67 5e       	subi	r22, 0xE7	; 231
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	LCD_CreateChar(3,dal);
 50a:	be 01       	movw	r22, r28
 50c:	67 5d       	subi	r22, 0xD7	; 215
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	LCD_CreateChar(4, geem);
 516:	be 01       	movw	r22, r28
 518:	67 5f       	subi	r22, 0xF7	; 247
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	LCD_CreateChar(5, memeMid);
 522:	be 01       	movw	r22, r28
 524:	6f 5c       	subi	r22, 0xCF	; 207
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	85 e0       	ldi	r24, 0x05	; 5
 52a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	LCD_CreateChar(6, lamEnd);
 52e:	be 01       	movw	r22, r28
 530:	6f 5d       	subi	r22, 0xDF	; 223
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	86 e0       	ldi	r24, 0x06	; 6
 536:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	LCD_CreateChar(7, heart);
 53a:	be 01       	movw	r22, r28
 53c:	67 5c       	subi	r22, 0xC7	; 199
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	87 e0       	ldi	r24, 0x07	; 7
 542:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_CreateChar>
	

	LCD_PutCustom(_LCD_COLS-3,0,0);
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	8d e0       	ldi	r24, 0x0D	; 13
 54c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	LCD_PutCustom(_LCD_COLS-4,0,1);
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	8c e0       	ldi	r24, 0x0C	; 12
 556:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	LCD_PutCustom(_LCD_COLS-5,0,2);
 55a:	42 e0       	ldi	r20, 0x02	; 2
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	8b e0       	ldi	r24, 0x0B	; 11
 560:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	LCD_PutCustom(_LCD_COLS-6,0,3);
 564:	43 e0       	ldi	r20, 0x03	; 3
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	8a e0       	ldi	r24, 0x0A	; 10
 56a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	
	LCD_Puts(_LCD_COLS-7, 0, " ");
 56e:	40 ea       	ldi	r20, 0xA0	; 160
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	89 e0       	ldi	r24, 0x09	; 9
 576:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_Puts>
	
	LCD_PutCustom(_LCD_COLS-8,0,4);
 57a:	44 e0       	ldi	r20, 0x04	; 4
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	88 e0       	ldi	r24, 0x08	; 8
 580:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	LCD_PutCustom(_LCD_COLS-9,0,5);
 584:	45 e0       	ldi	r20, 0x05	; 5
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	87 e0       	ldi	r24, 0x07	; 7
 58a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	LCD_PutCustom(_LCD_COLS-10,0,1);
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	86 e0       	ldi	r24, 0x06	; 6
 594:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	LCD_PutCustom(_LCD_COLS-11,0,6);
 598:	46 e0       	ldi	r20, 0x06	; 6
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	
	LCD_Puts(_LCD_COLS-12, 0, " ");
 5a2:	40 ea       	ldi	r20, 0xA0	; 160
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	84 e0       	ldi	r24, 0x04	; 4
 5aa:	0e 94 bd 01 	call	0x37a	; 0x37a <LCD_Puts>
	
	LCD_PutCustom(_LCD_COLS-13,0,7);
 5ae:	47 e0       	ldi	r20, 0x07	; 7
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <LCD_PutCustom>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b8:	2f ef       	ldi	r18, 0xFF	; 255
 5ba:	83 ed       	ldi	r24, 0xD3	; 211
 5bc:	90 e3       	ldi	r25, 0x30	; 48
 5be:	21 50       	subi	r18, 0x01	; 1
 5c0:	80 40       	sbci	r24, 0x00	; 0
 5c2:	90 40       	sbci	r25, 0x00	; 0
 5c4:	e1 f7       	brne	.-8      	; 0x5be <main+0x186>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <main+0x190>
 5c8:	00 00       	nop
	
	
	_delay_ms(1000);
    while (1) 
    {	
		LCD_ScrollLeft();
 5ca:	0e 94 93 01 	call	0x326	; 0x326 <LCD_ScrollLeft>
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	84 e3       	ldi	r24, 0x34	; 52
 5d2:	9c e0       	ldi	r25, 0x0C	; 12
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <main+0x19c>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <main+0x1a6>
 5de:	00 00       	nop
 5e0:	f4 cf       	rjmp	.-24     	; 0x5ca <main+0x192>

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
