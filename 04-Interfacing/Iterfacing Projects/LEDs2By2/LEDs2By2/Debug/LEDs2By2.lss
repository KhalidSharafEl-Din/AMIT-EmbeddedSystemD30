
LEDs2By2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000659  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  000008b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c4  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define DELAY 250


int main(void)
{
    DDRC = 0xFF;	DDRD = 0xFF;	// Set PORTC & PORTD as OUTPUT
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
  70:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00;	PORTD = 0x00;	// Init PORTC & PORTD to LOW
  72:	15 ba       	out	0x15, r1	; 21
  74:	12 ba       	out	0x12, r1	; 18
    while (1) 
    {
		//Close the Curtain
		for(int i =0; i<8; i+=2){			
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	37 c0       	rjmp	.+110    	; 0xea <main+0x7e>
			PORTD |= (128 >> i);
  7c:	62 b3       	in	r22, 0x12	; 18
  7e:	80 e8       	ldi	r24, 0x80	; 128
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	ac 01       	movw	r20, r24
  84:	02 2e       	mov	r0, r18
  86:	02 c0       	rjmp	.+4      	; 0x8c <main+0x20>
  88:	55 95       	asr	r21
  8a:	47 95       	ror	r20
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <main+0x1c>
  90:	46 2b       	or	r20, r22
  92:	42 bb       	out	0x12, r20	; 18
			PORTD |= (128 >> (i+1));
  94:	42 b3       	in	r20, 0x12	; 18
  96:	b9 01       	movw	r22, r18
  98:	6f 5f       	subi	r22, 0xFF	; 255
  9a:	7f 4f       	sbci	r23, 0xFF	; 255
  9c:	06 2e       	mov	r0, r22
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
  a0:	95 95       	asr	r25
  a2:	87 95       	ror	r24
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x34>
  a8:	84 2b       	or	r24, r20
  aa:	82 bb       	out	0x12, r24	; 18
			PORTC |= (1 << i);
  ac:	75 b3       	in	r23, 0x15	; 21
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 2e       	mov	r0, r18
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x50>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x4c>
  c0:	47 2b       	or	r20, r23
  c2:	45 bb       	out	0x15, r20	; 21
			PORTC |= (1 << (i+1));
  c4:	45 b3       	in	r20, 0x15	; 21
  c6:	02 c0       	rjmp	.+4      	; 0xcc <main+0x60>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <main+0x5c>
  d0:	84 2b       	or	r24, r20
  d2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	4f ef       	ldi	r20, 0xFF	; 255
  d6:	84 e3       	ldi	r24, 0x34	; 52
  d8:	9c e0       	ldi	r25, 0x0C	; 12
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
    DDRC = 0xFF;	DDRD = 0xFF;	// Set PORTC & PORTD as OUTPUT
	PORTC = 0x00;	PORTD = 0x00;	// Init PORTC & PORTD to LOW
    while (1) 
    {
		//Close the Curtain
		for(int i =0; i<8; i+=2){			
  e6:	2e 5f       	subi	r18, 0xFE	; 254
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	28 30       	cpi	r18, 0x08	; 8
  ec:	31 05       	cpc	r19, r1
  ee:	34 f2       	brlt	.-116    	; 0x7c <main+0x10>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	3c c0       	rjmp	.+120    	; 0x16e <main+0x102>
			_delay_ms(DELAY);
		}
		
		//Open the Curtain
		for(int i =0; i<8; i+=2){
			PORTD &= ~(1 << i);
  f6:	52 b3       	in	r21, 0x12	; 18
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	bc 01       	movw	r22, r24
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x9a>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <main+0x96>
 10a:	46 2f       	mov	r20, r22
 10c:	40 95       	com	r20
 10e:	45 23       	and	r20, r21
 110:	42 bb       	out	0x12, r20	; 18
			PORTD &= ~(1 << (i+1));
 112:	42 b3       	in	r20, 0x12	; 18
 114:	f9 01       	movw	r30, r18
 116:	31 96       	adiw	r30, 0x01	; 1
 118:	0e 2e       	mov	r0, r30
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <main+0xb0>
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	82 bb       	out	0x12, r24	; 18
			PORTC &= ~(128 >> i);
 12a:	55 b3       	in	r21, 0x15	; 21
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	bc 01       	movw	r22, r24
 132:	02 2e       	mov	r0, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <main+0xce>
 136:	75 95       	asr	r23
 138:	67 95       	ror	r22
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <main+0xca>
 13e:	46 2f       	mov	r20, r22
 140:	40 95       	com	r20
 142:	45 23       	and	r20, r21
 144:	45 bb       	out	0x15, r20	; 21
			PORTC &= ~(128 >> (i+1));
 146:	45 b3       	in	r20, 0x15	; 21
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0xe2>
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	ea 95       	dec	r30
 150:	e2 f7       	brpl	.-8      	; 0x14a <main+0xde>
 152:	80 95       	com	r24
 154:	84 23       	and	r24, r20
 156:	85 bb       	out	0x15, r24	; 21
 158:	4f ef       	ldi	r20, 0xFF	; 255
 15a:	84 e3       	ldi	r24, 0x34	; 52
 15c:	9c e0       	ldi	r25, 0x0C	; 12
 15e:	41 50       	subi	r20, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xf2>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xfc>
 168:	00 00       	nop
			PORTC |= (1 << (i+1));
			_delay_ms(DELAY);
		}
		
		//Open the Curtain
		for(int i =0; i<8; i+=2){
 16a:	2e 5f       	subi	r18, 0xFE	; 254
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	28 30       	cpi	r18, 0x08	; 8
 170:	31 05       	cpc	r19, r1
 172:	0c f2       	brlt	.-126    	; 0xf6 <main+0x8a>
 174:	80 cf       	rjmp	.-256    	; 0x76 <main+0xa>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
