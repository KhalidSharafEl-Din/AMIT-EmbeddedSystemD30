
DIO_Driver_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000745  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c1  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000174  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  64:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_VoidInit>:
	functions definition
*/

void DIO_VoidInit(void)
{
	DDRA = DIO_u8_PORTA_DIR;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = DIO_u8_PORTB_DIR;
  70:	17 ba       	out	0x17, r1	; 23
	DDRC = DIO_u8_PORTC_DIR;
  72:	14 ba       	out	0x14, r1	; 20
	DDRD = DIO_u8_PORTD_DIR;
  74:	88 e0       	ldi	r24, 0x08	; 8
  76:	81 bb       	out	0x11, r24	; 17
  78:	08 95       	ret

0000007a <DIO_VoidSetPinValue>:
}

void DIO_VoidSetPinValue(u8 DIO_u8Port , u8 DIO_u8Pin , u8 DIO_u8Val)
{
	switch(DIO_u8Port)
  7a:	86 30       	cpi	r24, 0x06	; 6
  7c:	29 f1       	breq	.+74     	; 0xc8 <DIO_VoidSetPinValue+0x4e>
  7e:	18 f4       	brcc	.+6      	; 0x86 <DIO_VoidSetPinValue+0xc>
  80:	85 30       	cpi	r24, 0x05	; 5
  82:	39 f0       	breq	.+14     	; 0x92 <DIO_VoidSetPinValue+0x18>
  84:	08 95       	ret
  86:	87 30       	cpi	r24, 0x07	; 7
  88:	d1 f1       	breq	.+116    	; 0xfe <DIO_VoidSetPinValue+0x84>
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	09 f4       	brne	.+2      	; 0x90 <DIO_VoidSetPinValue+0x16>
  8e:	52 c0       	rjmp	.+164    	; 0x134 <DIO_VoidSetPinValue+0xba>
  90:	08 95       	ret
	{
		case DIO_u8_PORTA:
		
			if(DIO_u8Val == DIO_u8_HIGH)
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	59 f4       	brne	.+22     	; 0xac <DIO_VoidSetPinValue+0x32>
			{
				SET_BIT(PORTA , DIO_u8Pin);
  96:	2b b3       	in	r18, 0x1b	; 27
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_VoidSetPinValue+0x28>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_VoidSetPinValue+0x24>
  a6:	82 2b       	or	r24, r18
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	08 95       	ret
			}
			else if(DIO_u8Val == DIO_u8_LOW)
  ac:	41 11       	cpse	r20, r1
  ae:	5c c0       	rjmp	.+184    	; 0x168 <DIO_VoidSetPinValue+0xee>
			{
				CLEAR_BIT(PORTA , DIO_u8Pin);
  b0:	2b b3       	in	r18, 0x1b	; 27
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_VoidSetPinValue+0x42>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_VoidSetPinValue+0x3e>
  c0:	80 95       	com	r24
  c2:	82 23       	and	r24, r18
  c4:	8b bb       	out	0x1b, r24	; 27
  c6:	08 95       	ret
			}
			break;
			
		case DIO_u8_PORTB:
		
			if(DIO_u8Val == DIO_u8_HIGH)
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	59 f4       	brne	.+22     	; 0xe2 <DIO_VoidSetPinValue+0x68>
			{
				SET_BIT(PORTB , DIO_u8Pin);
  cc:	28 b3       	in	r18, 0x18	; 24
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_VoidSetPinValue+0x5e>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_VoidSetPinValue+0x5a>
  dc:	82 2b       	or	r24, r18
  de:	88 bb       	out	0x18, r24	; 24
  e0:	08 95       	ret
			}
			else if(DIO_u8Val == DIO_u8_LOW)
  e2:	41 11       	cpse	r20, r1
  e4:	41 c0       	rjmp	.+130    	; 0x168 <DIO_VoidSetPinValue+0xee>
			{
				CLEAR_BIT(PORTB , DIO_u8Pin);
  e6:	28 b3       	in	r18, 0x18	; 24
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_VoidSetPinValue+0x78>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_VoidSetPinValue+0x74>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	08 95       	ret
			}
		break;
		
		case DIO_u8_PORTC:
		
			if(DIO_u8Val == DIO_u8_HIGH)
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_VoidSetPinValue+0x9e>
			{
				SET_BIT(PORTC , DIO_u8Pin);
 102:	25 b3       	in	r18, 0x15	; 21
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_VoidSetPinValue+0x94>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_VoidSetPinValue+0x90>
 112:	82 2b       	or	r24, r18
 114:	85 bb       	out	0x15, r24	; 21
 116:	08 95       	ret
			}
			else if(DIO_u8Val == DIO_u8_LOW)
 118:	41 11       	cpse	r20, r1
 11a:	26 c0       	rjmp	.+76     	; 0x168 <DIO_VoidSetPinValue+0xee>
			{
				CLEAR_BIT(PORTC , DIO_u8Pin);
 11c:	25 b3       	in	r18, 0x15	; 21
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_VoidSetPinValue+0xae>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_VoidSetPinValue+0xaa>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	85 bb       	out	0x15, r24	; 21
 132:	08 95       	ret
			}
			break;
			
		case DIO_u8_PORTD:
		
			if(DIO_u8Val == DIO_u8_HIGH)
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	59 f4       	brne	.+22     	; 0x14e <DIO_VoidSetPinValue+0xd4>
			{
				SET_BIT(PORTD , DIO_u8Pin);
 138:	22 b3       	in	r18, 0x12	; 18
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_VoidSetPinValue+0xca>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_VoidSetPinValue+0xc6>
 148:	82 2b       	or	r24, r18
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	08 95       	ret
			}
			else if(DIO_u8Val == DIO_u8_LOW)
 14e:	41 11       	cpse	r20, r1
 150:	0b c0       	rjmp	.+22     	; 0x168 <DIO_VoidSetPinValue+0xee>
			{
				CLEAR_BIT(PORTD , DIO_u8Pin);
 152:	22 b3       	in	r18, 0x12	; 18
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_VoidSetPinValue+0xe4>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_VoidSetPinValue+0xe0>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret

0000016a <DIO_u8GetPinValue>:
	}
}

u8 DIO_u8GetPinValue(u8 DIO_u8Port , u8 DIO_u8Pin)
{
	switch(DIO_u8Port)
 16a:	86 30       	cpi	r24, 0x06	; 6
 16c:	91 f0       	breq	.+36     	; 0x192 <DIO_u8GetPinValue+0x28>
 16e:	18 f4       	brcc	.+6      	; 0x176 <DIO_u8GetPinValue+0xc>
 170:	85 30       	cpi	r24, 0x05	; 5
 172:	31 f0       	breq	.+12     	; 0x180 <DIO_u8GetPinValue+0x16>
 174:	29 c0       	rjmp	.+82     	; 0x1c8 <DIO_u8GetPinValue+0x5e>
 176:	87 30       	cpi	r24, 0x07	; 7
 178:	a9 f0       	breq	.+42     	; 0x1a4 <DIO_u8GetPinValue+0x3a>
 17a:	88 30       	cpi	r24, 0x08	; 8
 17c:	e1 f0       	breq	.+56     	; 0x1b6 <DIO_u8GetPinValue+0x4c>
 17e:	24 c0       	rjmp	.+72     	; 0x1c8 <DIO_u8GetPinValue+0x5e>
	{
		case DIO_u8_PORTA:
				return GET_BIT(PINA , DIO_u8Pin);
 180:	89 b3       	in	r24, 0x19	; 25
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_u8GetPinValue+0x20>
 186:	95 95       	asr	r25
 188:	87 95       	ror	r24
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_u8GetPinValue+0x1c>
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	08 95       	ret
		
		case DIO_u8_PORTB:
				return GET_BIT(PINB , DIO_u8Pin);
 192:	86 b3       	in	r24, 0x16	; 22
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_u8GetPinValue+0x32>
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_u8GetPinValue+0x2e>
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	08 95       	ret
				
		case DIO_u8_PORTC:
				return GET_BIT(PINC , DIO_u8Pin);
 1a4:	83 b3       	in	r24, 0x13	; 19
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_u8GetPinValue+0x44>
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_u8GetPinValue+0x40>
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	08 95       	ret
				
		case DIO_u8_PORTD:
				return GET_BIT(PIND , DIO_u8Pin);
 1b6:	80 b3       	in	r24, 0x10	; 16
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_u8GetPinValue+0x56>
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_u8GetPinValue+0x52>
 1c4:	81 70       	andi	r24, 0x01	; 1
 1c6:	08 95       	ret
				
		default:
				// error
				return DIO_u8_ERROR;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
	}
 1ca:	08 95       	ret

000001cc <main>:
#include "DIO_interface.h"

int main(void)
{ 
	u8 flag = 0;
	DIO_VoidInit();
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_VoidInit>
#include "BIT_MATH.h"
#include "DIO_interface.h"

int main(void)
{ 
	u8 flag = 0;
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
	DIO_VoidInit();
	
	
	while(1)
	{
		if(DIO_u8GetPinValue(DIO_u8_PORTD , DIO_u8_PIN2) == DIO_u8_HIGH)
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_u8GetPinValue>
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	39 f4       	brne	.+14     	; 0x1ec <main+0x20>
		{
			TOGGLE_BIT(flag,0);
 1de:	c8 27       	eor	r28, r24
			while(DIO_u8GetPinValue(DIO_u8_PORTD , DIO_u8_PIN2) == DIO_u8_HIGH); // polling
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_u8GetPinValue>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	d1 f3       	breq	.-12     	; 0x1e0 <main+0x14>
		}
		
		if(flag == 0)
 1ec:	c1 11       	cpse	r28, r1
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <main+0x30>
		{
			DIO_VoidSetPinValue(DIO_u8_PORTD , DIO_u8_PIN3 , DIO_u8_HIGH);
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	63 e0       	ldi	r22, 0x03	; 3
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_VoidSetPinValue>
 1fa:	eb cf       	rjmp	.-42     	; 0x1d2 <main+0x6>
		}
		else if(flag == 1)
 1fc:	c1 30       	cpi	r28, 0x01	; 1
 1fe:	49 f7       	brne	.-46     	; 0x1d2 <main+0x6>
		{
			DIO_VoidSetPinValue(DIO_u8_PORTD , DIO_u8_PIN3 , DIO_u8_LOW);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	63 e0       	ldi	r22, 0x03	; 3
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 3d 00 	call	0x7a	; 0x7a <DIO_VoidSetPinValue>
 20a:	e3 cf       	rjmp	.-58     	; 0x1d2 <main+0x6>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
