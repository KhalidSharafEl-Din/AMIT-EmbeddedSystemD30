
EXINT-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000966  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000710  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e5  00000000  00000000  000013be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  000019a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000399  00000000  00000000  00001f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  64:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_VoidInit>:
#include "DIO_interface.h"


void DIO_VoidInit(void){
    // Sit the Pin dirction according to the configration file 
    DDRA = DIO_u8_PORTA_DIR;
  6c:	1a ba       	out	0x1a, r1	; 26
    DDRB = DIO_u8_PORTB_DIR;
  6e:	17 ba       	out	0x17, r1	; 23
    DDRC = DIO_u8_PORTC_DIR;
  70:	14 ba       	out	0x14, r1	; 20
    DDRD = DIO_u8_PORTD_DIR;
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	81 bb       	out	0x11, r24	; 17
  76:	08 95       	ret

00000078 <INT_init>:


void INT_disableInterrupt(u8 intPin){
    if      (intPin == EXT_INT_0){CLEAR_BIT(GICR,INT0);}
    else if (intPin == EXT_INT_1){CLEAR_BIT(GICR,INT1);}
    else if (intPin == EXT_INT_2){CLEAR_BIT(GICR,INT2);}
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	85 bf       	out	0x35, r24	; 53
  7e:	85 b7       	in	r24, 0x35	; 53
  80:	82 60       	ori	r24, 0x02	; 2
  82:	85 bf       	out	0x35, r24	; 53
  84:	8b b7       	in	r24, 0x3b	; 59
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8b bf       	out	0x3b, r24	; 59
  8a:	08 95       	ret

0000008c <INT_enbaleInterrupt>:
  8c:	81 11       	cpse	r24, r1
  8e:	04 c0       	rjmp	.+8      	; 0x98 <INT_enbaleInterrupt+0xc>
  90:	8b b7       	in	r24, 0x3b	; 59
  92:	80 64       	ori	r24, 0x40	; 64
  94:	8b bf       	out	0x3b, r24	; 59
  96:	08 95       	ret
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	21 f4       	brne	.+8      	; 0xa4 <INT_enbaleInterrupt+0x18>
  9c:	8b b7       	in	r24, 0x3b	; 59
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	8b bf       	out	0x3b, r24	; 59
  a2:	08 95       	ret
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	19 f4       	brne	.+6      	; 0xae <INT_enbaleInterrupt+0x22>
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8b bf       	out	0x3b, r24	; 59
  ae:	08 95       	ret

000000b0 <INT_SenseControlMode>:
}


void INT_SenseControlMode(u8 intPin, u8 SenseControlMode){
    if      (intPin == EXT_INT_0){
  b0:	81 11       	cpse	r24, r1
  b2:	24 c0       	rjmp	.+72     	; 0xfc <INT_SenseControlMode+0x4c>

        switch (SenseControlMode){
  b4:	61 30       	cpi	r22, 0x01	; 1
  b6:	69 f0       	breq	.+26     	; 0xd2 <INT_SenseControlMode+0x22>
  b8:	28 f0       	brcs	.+10     	; 0xc4 <INT_SenseControlMode+0x14>
  ba:	62 30       	cpi	r22, 0x02	; 2
  bc:	89 f0       	breq	.+34     	; 0xe0 <INT_SenseControlMode+0x30>
  be:	63 30       	cpi	r22, 0x03	; 3
  c0:	b1 f0       	breq	.+44     	; 0xee <INT_SenseControlMode+0x3e>
  c2:	08 95       	ret
            case LOW_LEVEL:                    // 00
                CLEAR_BIT(MCUCR, ISC00);
  c4:	85 b7       	in	r24, 0x35	; 53
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	85 bf       	out	0x35, r24	; 53
                CLEAR_BIT(MCUCR, ISC01);        break;   
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	85 bf       	out	0x35, r24	; 53
  d0:	08 95       	ret
            case LOGICAL_CHANGE :              // 01
                SET_BIT(MCUCR, ISC00);
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bf       	out	0x35, r24	; 53
                CLEAR_BIT(MCUCR, ISC01);        break;
  d8:	85 b7       	in	r24, 0x35	; 53
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	85 bf       	out	0x35, r24	; 53
  de:	08 95       	ret
            case FALLING_EDGE:                 // 10
                CLEAR_BIT(MCUCR, ISC00);
  e0:	85 b7       	in	r24, 0x35	; 53
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC01);          break;
  e6:	85 b7       	in	r24, 0x35	; 53
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	85 bf       	out	0x35, r24	; 53
  ec:	08 95       	ret
            case RISING_EDGE:                  // 11
                SET_BIT(MCUCR, ISC00);
  ee:	85 b7       	in	r24, 0x35	; 53
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC01);          break;
  f4:	85 b7       	in	r24, 0x35	; 53
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	85 bf       	out	0x35, r24	; 53
  fa:	08 95       	ret
            default:                            break;
        }
        
    }else if (intPin == EXT_INT_1){
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	21 f5       	brne	.+72     	; 0x148 <INT_SenseControlMode+0x98>
        switch (SenseControlMode){
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	69 f0       	breq	.+26     	; 0x11e <INT_SenseControlMode+0x6e>
 104:	28 f0       	brcs	.+10     	; 0x110 <INT_SenseControlMode+0x60>
 106:	62 30       	cpi	r22, 0x02	; 2
 108:	89 f0       	breq	.+34     	; 0x12c <INT_SenseControlMode+0x7c>
 10a:	63 30       	cpi	r22, 0x03	; 3
 10c:	b1 f0       	breq	.+44     	; 0x13a <INT_SenseControlMode+0x8a>
 10e:	08 95       	ret
            case LOW_LEVEL:                    // 00
                CLEAR_BIT(MCUCR, ISC10);
 110:	85 b7       	in	r24, 0x35	; 53
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	85 bf       	out	0x35, r24	; 53
                CLEAR_BIT(MCUCR, ISC11);        break;   
 116:	85 b7       	in	r24, 0x35	; 53
 118:	87 7f       	andi	r24, 0xF7	; 247
 11a:	85 bf       	out	0x35, r24	; 53
 11c:	08 95       	ret
            case LOGICAL_CHANGE :              // 01
                SET_BIT(MCUCR, ISC10);
 11e:	85 b7       	in	r24, 0x35	; 53
 120:	84 60       	ori	r24, 0x04	; 4
 122:	85 bf       	out	0x35, r24	; 53
                CLEAR_BIT(MCUCR, ISC11);        break;
 124:	85 b7       	in	r24, 0x35	; 53
 126:	87 7f       	andi	r24, 0xF7	; 247
 128:	85 bf       	out	0x35, r24	; 53
 12a:	08 95       	ret
            case FALLING_EDGE:                 // 10
                CLEAR_BIT(MCUCR, ISC10);
 12c:	85 b7       	in	r24, 0x35	; 53
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC11);          break;
 132:	85 b7       	in	r24, 0x35	; 53
 134:	88 60       	ori	r24, 0x08	; 8
 136:	85 bf       	out	0x35, r24	; 53
 138:	08 95       	ret
            case RISING_EDGE:                  // 11
                SET_BIT(MCUCR, ISC10);
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC11);          break;
 140:	85 b7       	in	r24, 0x35	; 53
 142:	88 60       	ori	r24, 0x08	; 8
 144:	85 bf       	out	0x35, r24	; 53
 146:	08 95       	ret
            default:                            break;
        }
    }else if (intPin == EXT_INT_2){
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	91 f4       	brne	.+36     	; 0x170 <INT_SenseControlMode+0xc0>
        switch (SenseControlMode){
 14c:	62 30       	cpi	r22, 0x02	; 2
 14e:	19 f0       	breq	.+6      	; 0x156 <INT_SenseControlMode+0xa6>
 150:	63 30       	cpi	r22, 0x03	; 3
 152:	41 f0       	breq	.+16     	; 0x164 <INT_SenseControlMode+0xb4>
 154:	08 95       	ret
            case FALLING_EDGE:                 // 10
                CLEAR_BIT(MCUCR, ISC10);
 156:	85 b7       	in	r24, 0x35	; 53
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC11);          break;
 15c:	85 b7       	in	r24, 0x35	; 53
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	85 bf       	out	0x35, r24	; 53
 162:	08 95       	ret
            case RISING_EDGE:                  // 11
                SET_BIT(MCUCR, ISC10);
 164:	85 b7       	in	r24, 0x35	; 53
 166:	84 60       	ori	r24, 0x04	; 4
 168:	85 bf       	out	0x35, r24	; 53
                SET_BIT(MCUCR, ISC11);          break;
 16a:	85 b7       	in	r24, 0x35	; 53
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	85 bf       	out	0x35, r24	; 53
 170:	08 95       	ret

00000172 <GIE_enable>:
#include "GIE_private.h"
#include "GIE_config.h"
#include "GIE_interface.h"

void GIE_enable(void){
    SET_BIT(SREG, GIE);
 172:	8f b7       	in	r24, 0x3f	; 63
 174:	80 68       	ori	r24, 0x80	; 128
 176:	8f bf       	out	0x3f, r24	; 63
 178:	08 95       	ret

0000017a <__vector_1>:
#include "BIT_MATH.h"
#include "DIO_interface.h"
#include "EINT_interface.h"
#include "GIE_config.h"

ISR(INT0_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	TOGGLE_BIT(PORTD, 3);
 188:	92 b3       	in	r25, 0x12	; 18
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	89 27       	eor	r24, r25
 18e:	82 bb       	out	0x12, r24	; 18
}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:

int main(void)
{
	DIO_VoidInit();
 19e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_VoidInit>
	INT_init();
 1a2:	0e 94 3c 00 	call	0x78	; 0x78 <INT_init>
	
	INT_enbaleInterrupt(EXT_INT_0);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 46 00 	call	0x8c	; 0x8c <INT_enbaleInterrupt>
	INT_SenseControlMode(EXT_INT_0, FALLING_EDGE);
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 58 00 	call	0xb0	; 0xb0 <INT_SenseControlMode>
	GIE_enable();
 1b4:	0e 94 b9 00 	call	0x172	; 0x172 <GIE_enable>
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <main+0x1a>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
