
LCD _Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000520  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800082  00800082  000005d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ea  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  00001b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000991  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae8  00000000  00000000  00003534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 33 02 	call	0x466	; 0x466 <main>
  8a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VoidInit>:
    default:
        // error
        return DIO_u8_ERROR;
    }

}
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
  96:	8e e0       	ldi	r24, 0x0E	; 14
  98:	87 bb       	out	0x17, r24	; 23
  9a:	14 ba       	out	0x14, r1	; 20
  9c:	11 ba       	out	0x11, r1	; 17
  9e:	08 95       	ret

000000a0 <DIO_VoidSetPinValue>:
  a0:	86 30       	cpi	r24, 0x06	; 6
  a2:	29 f1       	breq	.+74     	; 0xee <DIO_VoidSetPinValue+0x4e>
  a4:	18 f4       	brcc	.+6      	; 0xac <DIO_VoidSetPinValue+0xc>
  a6:	85 30       	cpi	r24, 0x05	; 5
  a8:	39 f0       	breq	.+14     	; 0xb8 <DIO_VoidSetPinValue+0x18>
  aa:	08 95       	ret
  ac:	87 30       	cpi	r24, 0x07	; 7
  ae:	d1 f1       	breq	.+116    	; 0x124 <DIO_VoidSetPinValue+0x84>
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_VoidSetPinValue+0x16>
  b4:	52 c0       	rjmp	.+164    	; 0x15a <DIO_VoidSetPinValue+0xba>
  b6:	08 95       	ret
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	59 f4       	brne	.+22     	; 0xd2 <DIO_VoidSetPinValue+0x32>
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_VoidSetPinValue+0x28>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_VoidSetPinValue+0x24>
  cc:	82 2b       	or	r24, r18
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	08 95       	ret
  d2:	41 11       	cpse	r20, r1
  d4:	5c c0       	rjmp	.+184    	; 0x18e <DIO_VoidSetPinValue+0xee>
  d6:	2b b3       	in	r18, 0x1b	; 27
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_VoidSetPinValue+0x42>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_VoidSetPinValue+0x3e>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	08 95       	ret
  ee:	41 30       	cpi	r20, 0x01	; 1
  f0:	59 f4       	brne	.+22     	; 0x108 <DIO_VoidSetPinValue+0x68>
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_VoidSetPinValue+0x5e>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_VoidSetPinValue+0x5a>
 102:	82 2b       	or	r24, r18
 104:	88 bb       	out	0x18, r24	; 24
 106:	08 95       	ret
 108:	41 11       	cpse	r20, r1
 10a:	41 c0       	rjmp	.+130    	; 0x18e <DIO_VoidSetPinValue+0xee>
 10c:	28 b3       	in	r18, 0x18	; 24
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_VoidSetPinValue+0x78>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_VoidSetPinValue+0x74>
 11c:	80 95       	com	r24
 11e:	82 23       	and	r24, r18
 120:	88 bb       	out	0x18, r24	; 24
 122:	08 95       	ret
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <DIO_VoidSetPinValue+0x9e>
 128:	25 b3       	in	r18, 0x15	; 21
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_VoidSetPinValue+0x94>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_VoidSetPinValue+0x90>
 138:	82 2b       	or	r24, r18
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	08 95       	ret
 13e:	41 11       	cpse	r20, r1
 140:	26 c0       	rjmp	.+76     	; 0x18e <DIO_VoidSetPinValue+0xee>
 142:	25 b3       	in	r18, 0x15	; 21
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_VoidSetPinValue+0xae>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_VoidSetPinValue+0xaa>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 bb       	out	0x15, r24	; 21
 158:	08 95       	ret
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	59 f4       	brne	.+22     	; 0x174 <DIO_VoidSetPinValue+0xd4>
 15e:	22 b3       	in	r18, 0x12	; 18
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_VoidSetPinValue+0xca>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_VoidSetPinValue+0xc6>
 16e:	82 2b       	or	r24, r18
 170:	82 bb       	out	0x12, r24	; 18
 172:	08 95       	ret
 174:	41 11       	cpse	r20, r1
 176:	0b c0       	rjmp	.+22     	; 0x18e <DIO_VoidSetPinValue+0xee>
 178:	22 b3       	in	r18, 0x12	; 18
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_VoidSetPinValue+0xe4>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_VoidSetPinValue+0xe0>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	08 95       	ret

00000190 <DIO_VoidSetPortValue>:


void DIO_VoidSetPortValue(u8 DIO_u8_PORT, u8 DIO_u8Val){

    switch (DIO_u8_PORT){
 190:	86 30       	cpi	r24, 0x06	; 6
 192:	59 f0       	breq	.+22     	; 0x1aa <DIO_VoidSetPortValue+0x1a>
 194:	18 f4       	brcc	.+6      	; 0x19c <DIO_VoidSetPortValue+0xc>
 196:	85 30       	cpi	r24, 0x05	; 5
 198:	31 f0       	breq	.+12     	; 0x1a6 <DIO_VoidSetPortValue+0x16>
 19a:	08 95       	ret
 19c:	87 30       	cpi	r24, 0x07	; 7
 19e:	39 f0       	breq	.+14     	; 0x1ae <DIO_VoidSetPortValue+0x1e>
 1a0:	88 30       	cpi	r24, 0x08	; 8
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <DIO_VoidSetPortValue+0x22>
 1a4:	08 95       	ret
        case DIO_u8_PORTA:
            ASSIGN_PORT(PORTA, DIO_u8Val);
 1a6:	6b bb       	out	0x1b, r22	; 27
            break;
 1a8:	08 95       	ret
        case DIO_u8_PORTB:
            ASSIGN_PORT(PORTB, DIO_u8Val);
 1aa:	68 bb       	out	0x18, r22	; 24
            break;
 1ac:	08 95       	ret
        case DIO_u8_PORTC:
            ASSIGN_PORT(PORTB, DIO_u8Val);
 1ae:	68 bb       	out	0x18, r22	; 24
            break;
 1b0:	08 95       	ret
        case DIO_u8_PORTD:
            ASSIGN_PORT(PORTD, DIO_u8Val);
 1b2:	62 bb       	out	0x12, r22	; 18
 1b4:	08 95       	ret

000001b6 <LCD_SendData>:
void LCD_ScrollLeft(){
	LCD_SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
}

void LCD_ScrollRight(){
	LCD_SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 1b6:	cf 93       	push	r28
 1b8:	c8 2f       	mov	r28, r24
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1ce:	6c 2f       	mov	r22, r28
 1d0:	60 7f       	andi	r22, 0xF0	; 240
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_SendData+0x30>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_SendData+0x36>
 1ec:	00 00       	nop
 1ee:	40 e0       	ldi	r20, 0x00	; 0
 1f0:	63 e0       	ldi	r22, 0x03	; 3
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_SendData+0x46>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_SendData+0x4c>
 202:	00 00       	nop
 204:	6c 2f       	mov	r22, r28
 206:	62 95       	swap	r22
 208:	60 7f       	andi	r22, 0xF0	; 240
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	63 e0       	ldi	r22, 0x03	; 3
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_SendData+0x68>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_SendData+0x6e>
 224:	00 00       	nop
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 230:	8f e9       	ldi	r24, 0x9F	; 159
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_SendData+0x7e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_SendData+0x84>
 23a:	00 00       	nop
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <LCD_SendCommand>:
 240:	cf 93       	push	r28
 242:	c8 2f       	mov	r28, r24
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 258:	6c 2f       	mov	r22, r28
 25a:	60 7f       	andi	r22, 0xF0	; 240
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	63 e0       	ldi	r22, 0x03	; 3
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 26c:	8f e9       	ldi	r24, 0x9F	; 159
 26e:	9f e0       	ldi	r25, 0x0F	; 15
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCD_SendCommand+0x30>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_SendCommand+0x36>
 276:	00 00       	nop
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	63 e0       	ldi	r22, 0x03	; 3
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 282:	8f e9       	ldi	r24, 0x9F	; 159
 284:	9f e0       	ldi	r25, 0x0F	; 15
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <LCD_SendCommand+0x46>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_SendCommand+0x4c>
 28c:	00 00       	nop
 28e:	6c 2f       	mov	r22, r28
 290:	62 95       	swap	r22
 292:	60 7f       	andi	r22, 0xF0	; 240
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_VoidSetPortValue>
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 2a4:	8f e9       	ldi	r24, 0x9F	; 159
 2a6:	9f e0       	ldi	r25, 0x0F	; 15
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <LCD_SendCommand+0x68>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <LCD_SendCommand+0x6e>
 2ae:	00 00       	nop
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	0e 94 50 00 	call	0xa0	; 0xa0 <DIO_VoidSetPinValue>
 2ba:	8f e9       	ldi	r24, 0x9F	; 159
 2bc:	9f e0       	ldi	r25, 0x0F	; 15
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_SendCommand+0x7e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_SendCommand+0x84>
 2c4:	00 00       	nop
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <LCD_Init>:
 2ca:	2f e7       	ldi	r18, 0x7F	; 127
 2cc:	85 eb       	ldi	r24, 0xB5	; 181
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <LCD_Init+0x6>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Init+0x10>
 2da:	00 00       	nop
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 2e2:	82 e3       	ldi	r24, 0x32	; 50
 2e4:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 2e8:	88 e2       	ldi	r24, 0x28	; 40
 2ea:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	9f e0       	ldi	r25, 0x0F	; 15
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_Init+0x28>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_Init+0x2e>
 2f8:	00 00       	nop
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 300:	8f e9       	ldi	r24, 0x9F	; 159
 302:	9f e0       	ldi	r25, 0x0F	; 15
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_Init+0x3a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_Init+0x40>
 30a:	00 00       	nop
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 312:	8f e3       	ldi	r24, 0x3F	; 63
 314:	9f e1       	ldi	r25, 0x1F	; 31
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <LCD_Init+0x4c>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <LCD_Init+0x52>
 31c:	00 00       	nop
 31e:	86 e0       	ldi	r24, 0x06	; 6
 320:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 324:	08 95       	ret

00000326 <LCD_Clear>:
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
 32c:	8f e1       	ldi	r24, 0x1F	; 31
 32e:	9e e4       	ldi	r25, 0x4E	; 78
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_Clear+0xa>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_Clear+0x10>
 336:	00 00       	nop
 338:	08 95       	ret

0000033a <LCD_CursorSet>:
		LCD_Put(data[i]);
	}
}


void LCD_CursorSet(u8 col, u8 row){
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <LCD_CursorSet+0x6>
 340:	00 d0       	rcall	.+0      	; 0x342 <LCD_CursorSet+0x8>
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
	u8 row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 346:	19 82       	std	Y+1, r1	; 0x01
 348:	90 e4       	ldi	r25, 0x40	; 64
 34a:	9a 83       	std	Y+2, r25	; 0x02
 34c:	94 e1       	ldi	r25, 0x14	; 20
 34e:	9b 83       	std	Y+3, r25	; 0x03
 350:	94 e5       	ldi	r25, 0x54	; 84
 352:	9c 83       	std	Y+4, r25	; 0x04
		if ( row >= _LCD_ROWS)
 354:	62 30       	cpi	r22, 0x02	; 2
 356:	08 f0       	brcs	.+2      	; 0x35a <LCD_CursorSet+0x20>
			{row = 0;} 
 358:	60 e0       	ldi	r22, 0x00	; 0
	LCD_Opts.currentX = col;  
 35a:	e2 e8       	ldi	r30, 0x82	; 130
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	83 83       	std	Z+3, r24	; 0x03
	LCD_Opts.currentY = row;
 360:	64 83       	std	Z+4, r22	; 0x04
	LCD_SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 362:	e1 e0       	ldi	r30, 0x01	; 1
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ec 0f       	add	r30, r28
 368:	fd 1f       	adc	r31, r29
 36a:	e6 0f       	add	r30, r22
 36c:	f1 1d       	adc	r31, r1
 36e:	90 81       	ld	r25, Z
 370:	89 0f       	add	r24, r25
 372:	80 68       	ori	r24, 0x80	; 128
 374:	0e 94 20 01 	call	0x240	; 0x240 <LCD_SendCommand>
}
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <LCD_Puts>:
void LCD_Clear(void){
    LCD_SendCommand(LCD_CLEARDISPLAY);
	_delay_ms(5);
}

void LCD_Puts(u8 x, u8 y, char* str){
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	ea 01       	movw	r28, r20
	LCD_CursorSet(x, y);
 38c:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_CursorSet>
	while (*str){
 390:	29 c0       	rjmp	.+82     	; 0x3e4 <LCD_Puts+0x5e>
		if(LCD_Opts.currentX >= _LCD_COLS){
 392:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__data_end+0x3>
 396:	80 31       	cpi	r24, 0x10	; 16
 398:	48 f0       	brcs	.+18     	; 0x3ac <LCD_Puts+0x26>
			LCD_Opts.currentX = 0;
 39a:	e2 e8       	ldi	r30, 0x82	; 130
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	13 82       	std	Z+3, r1	; 0x03
			LCD_Opts.currentY++;
 3a0:	64 81       	ldd	r22, Z+4	; 0x04
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	64 83       	std	Z+4, r22	; 0x04
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_CursorSet>
		}
		
		if(*str == '\n'){
 3ac:	88 81       	ld	r24, Y
 3ae:	8a 30       	cpi	r24, 0x0A	; 10
 3b0:	49 f4       	brne	.+18     	; 0x3c4 <LCD_Puts+0x3e>
			LCD_Opts.currentY++;
 3b2:	e2 e8       	ldi	r30, 0x82	; 130
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	64 81       	ldd	r22, Z+4	; 0x04
 3b8:	6f 5f       	subi	r22, 0xFF	; 255
 3ba:	64 83       	std	Z+4, r22	; 0x04
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 3bc:	83 81       	ldd	r24, Z+3	; 0x03
 3be:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_CursorSet>
 3c2:	0f c0       	rjmp	.+30     	; 0x3e2 <LCD_Puts+0x5c>
		}else if ( *str == '\r'){
 3c4:	8d 30       	cpi	r24, 0x0D	; 13
 3c6:	31 f4       	brne	.+12     	; 0x3d4 <LCD_Puts+0x4e>
			LCD_CursorSet(0, LCD_Opts.currentY);
 3c8:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__data_end+0x4>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_CursorSet>
 3d2:	07 c0       	rjmp	.+14     	; 0x3e2 <LCD_Puts+0x5c>
		}else{
			LCD_SendData(*str);
 3d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_SendData>
			LCD_Opts.currentX++;
 3d8:	e2 e8       	ldi	r30, 0x82	; 130
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	83 81       	ldd	r24, Z+3	; 0x03
 3de:	8f 5f       	subi	r24, 0xFF	; 255
 3e0:	83 83       	std	Z+3, r24	; 0x03
		}
		str++;
 3e2:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(5);
}

void LCD_Puts(u8 x, u8 y, char* str){
	LCD_CursorSet(x, y);
	while (*str){
 3e4:	88 81       	ld	r24, Y
 3e6:	81 11       	cpse	r24, r1
 3e8:	d4 cf       	rjmp	.-88     	; 0x392 <LCD_Puts+0xc>
			LCD_SendData(*str);
			LCD_Opts.currentX++;
		}
		str++;
	}
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <rotateString>:
		
		_delay_ms(200);	
    }
}

void rotateString(char* str, u8 size, u8 direction){
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	fc 01       	movw	r30, r24
	if(direction == 1){
 3f6:	41 30       	cpi	r20, 0x01	; 1
 3f8:	e9 f4       	brne	.+58     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		char c =  str[0];
 3fa:	40 81       	ld	r20, Z
		for(int i =0; i <size-1; i++){
 3fc:	20 e0       	ldi	r18, 0x00	; 0
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	09 c0       	rjmp	.+18     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			str[i]= str[i+1];
 402:	df 01       	movw	r26, r30
 404:	a2 0f       	add	r26, r18
 406:	b3 1f       	adc	r27, r19
 408:	11 96       	adiw	r26, 0x01	; 1
 40a:	8c 91       	ld	r24, X
 40c:	11 97       	sbiw	r26, 0x01	; 1
 40e:	8c 93       	st	X, r24
}

void rotateString(char* str, u8 size, u8 direction){
	if(direction == 1){
		char c =  str[0];
		for(int i =0; i <size-1; i++){
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	86 2f       	mov	r24, r22
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	28 17       	cp	r18, r24
 41c:	39 07       	cpc	r19, r25
 41e:	8c f3       	brlt	.-30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			str[i]= str[i+1];
		}
		str[size-2] = c ;
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	db 01       	movw	r26, r22
 424:	12 97       	sbiw	r26, 0x02	; 2
 426:	ae 0f       	add	r26, r30
 428:	bf 1f       	adc	r27, r31
 42a:	4c 93       	st	X, r20
		str[size-1] = '\0';
 42c:	e8 0f       	add	r30, r24
 42e:	f9 1f       	adc	r31, r25
 430:	10 82       	st	Z, r1
 432:	16 c0       	rjmp	.+44     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
	}else{
		char c= str[size-2];
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	62 50       	subi	r22, 0x02	; 2
 438:	71 09       	sbc	r23, r1
 43a:	dc 01       	movw	r26, r24
 43c:	a6 0f       	add	r26, r22
 43e:	b7 1f       	adc	r27, r23
 440:	8c 91       	ld	r24, X
		for(int i =size-2; i>0; i--){
 442:	09 c0       	rjmp	.+18     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			str[i]= str[i-1];
 444:	df 01       	movw	r26, r30
 446:	a6 0f       	add	r26, r22
 448:	b7 1f       	adc	r27, r23
 44a:	ed 01       	movw	r28, r26
 44c:	21 97       	sbiw	r28, 0x01	; 1
 44e:	98 81       	ld	r25, Y
 450:	9c 93       	st	X, r25
		}
		str[size-2] = c ;
		str[size-1] = '\0';
	}else{
		char c= str[size-2];
		for(int i =size-2; i>0; i--){
 452:	61 50       	subi	r22, 0x01	; 1
 454:	71 09       	sbc	r23, r1
 456:	16 16       	cp	r1, r22
 458:	17 06       	cpc	r1, r23
 45a:	a4 f3       	brlt	.-24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			str[i]= str[i-1];
		}
		str[0] =c;
 45c:	80 83       	st	Z, r24
		str[16] = '\0';
 45e:	10 8a       	std	Z+16, r1	; 0x10
	}
	
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <main>:
#include "util/delay.h"

void rotateString(char* str, u8 size, u8 direction);

int main(void)
{
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	a2 97       	sbiw	r28, 0x22	; 34
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
	DIO_VoidInit();
 47a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VoidInit>
	LCD_Init();
 47e:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_Init>
	LCD_Puts(0,0,   "     Khalid     ");
 482:	40 e6       	ldi	r20, 0x60	; 96
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Puts>
	LCD_Puts(0,1,   "  Sharaf El-din ");
 48e:	41 e7       	ldi	r20, 0x71	; 113
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Puts>
	char arr [17] = "     Khalid     ";
 49a:	81 e1       	ldi	r24, 0x11	; 17
 49c:	e0 e6       	ldi	r30, 0x60	; 96
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	de 01       	movw	r26, r28
 4a2:	11 96       	adiw	r26, 0x01	; 1
 4a4:	01 90       	ld	r0, Z+
 4a6:	0d 92       	st	X+, r0
 4a8:	8a 95       	dec	r24
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <main+0x3e>
	char arr2[17] = "  Sharaf El-din ";
 4ac:	81 e1       	ldi	r24, 0x11	; 17
 4ae:	e1 e7       	ldi	r30, 0x71	; 113
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	de 01       	movw	r26, r28
 4b4:	52 96       	adiw	r26, 0x12	; 18
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	83 ed       	ldi	r24, 0xD3	; 211
 4c2:	90 e3       	ldi	r25, 0x30	; 48
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <main+0x5e>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0x68>
 4ce:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
 4d0:	0e 94 93 01 	call	0x326	; 0x326 <LCD_Clear>
    /* Replace with your application code */
    while (1) 
    {	
		LCD_Puts(0,0, arr);
 4d4:	ae 01       	movw	r20, r28
 4d6:	4f 5f       	subi	r20, 0xFF	; 255
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Puts>
		rotateString(arr, 17, 1);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	61 e1       	ldi	r22, 0x11	; 17
 4e6:	ce 01       	movw	r24, r28
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <rotateString>
		
		LCD_Puts(0,1,arr2);
 4ee:	ae 01       	movw	r20, r28
 4f0:	4e 5e       	subi	r20, 0xEE	; 238
 4f2:	5f 4f       	sbci	r21, 0xFF	; 255
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Puts>
		rotateString(arr2, 17, 0);
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	61 e1       	ldi	r22, 0x11	; 17
 500:	ce 01       	movw	r24, r28
 502:	42 96       	adiw	r24, 0x12	; 18
 504:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <rotateString>
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	83 ec       	ldi	r24, 0xC3	; 195
 50c:	99 e0       	ldi	r25, 0x09	; 9
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <main+0xa8>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0xb2>
 518:	00 00       	nop
 51a:	dc cf       	rjmp	.-72     	; 0x4d4 <main+0x6e>

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
