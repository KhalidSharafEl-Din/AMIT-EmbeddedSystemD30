
7SegemetDisplayDual.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000661  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ba  00000000  00000000  00000e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000373  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000091  00000000  00000000  00001517  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <avr/interrupt.h>

int num = 0;

ISR (TIMER1_OVF_vect)		// Timer1 ISR
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	num++;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(num > 99) num=0;		// Increment the number 
  9c:	84 36       	cpi	r24, 0x64	; 100
  9e:	91 05       	cpc	r25, r1
  a0:	24 f0       	brlt	.+8      	; 0xaa <__vector_9+0x2e>
  a2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	TCNT1 = 57723;			// for 0.5 sec at 16 MHz >> TCNT1 = 65536 -(Delay_Seconds * F_CPU)/ scaler
  aa:	8b e7       	ldi	r24, 0x7B	; 123
  ac:	91 ee       	ldi	r25, 0xE1	; 225
  ae:	9d bd       	out	0x2d, r25	; 45
  b0:	8c bd       	out	0x2c, r24	; 44
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

int main(void)
{
	DDRA  = 0b11110000;					// Set PA4-PA7 As OUTPUT, A B C D on the Seven Segment Module
  c0:	80 ef       	ldi	r24, 0xF0	; 240
  c2:	8a bb       	out	0x1a, r24	; 26
	DDRB  = 0b00001110;					// Set PB1-PB3 As OUTPUT, EN_2 EN_1 DP
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	87 bb       	out	0x17, r24	; 23

	TCNT1 = 57723;						// for 0.5 sec at 16 MHz
  c8:	8b e7       	ldi	r24, 0x7B	; 123
  ca:	91 ee       	ldi	r25, 0xE1	; 225
  cc:	9d bd       	out	0x2d, r25	; 45
  ce:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
  d0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10) | (1<<CS12);;	// Timer mode with 1024 pre-scaler
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;				// Enable timer1 overflow interrupt(TOIE1)
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	89 bf       	out	0x39, r24	; 57
	sei();								// Enable global interrupts by setting global interrupt enable bit in SREG
  da:	78 94       	sei
    
	
    while (1) 
    {
			PORTB = 0b00000010;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	88 bb       	out	0x18, r24	; 24
			PORTA = ((num%10) << 4);	// Write the Ones on the first 7Seg
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	2a e0       	ldi	r18, 0x0A	; 10
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	0e 94 95 00 	call	0x12a	; 0x12a <__divmodhi4>
  f2:	82 95       	swap	r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	9c e9       	ldi	r25, 0x9C	; 156
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x3c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x42>
 102:	00 00       	nop
			_delay_ms(10);
			PORTB = 0b00000100;			// Write the Tens on the second 7Seg
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	88 bb       	out	0x18, r24	; 24
			PORTA = ((num/10) << 4);	
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 110:	b9 01       	movw	r22, r18
 112:	0e 94 95 00 	call	0x12a	; 0x12a <__divmodhi4>
 116:	62 95       	swap	r22
 118:	60 7f       	andi	r22, 0xF0	; 240
 11a:	6b bb       	out	0x1b, r22	; 27
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x60>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x66>
 126:	00 00       	nop
 128:	d9 cf       	rjmp	.-78     	; 0xdc <main+0x1c>

0000012a <__divmodhi4>:
 12a:	97 fb       	bst	r25, 7
 12c:	07 2e       	mov	r0, r23
 12e:	16 f4       	brtc	.+4      	; 0x134 <__divmodhi4+0xa>
 130:	00 94       	com	r0
 132:	07 d0       	rcall	.+14     	; 0x142 <__divmodhi4_neg1>
 134:	77 fd       	sbrc	r23, 7
 136:	09 d0       	rcall	.+18     	; 0x14a <__divmodhi4_neg2>
 138:	0e 94 a9 00 	call	0x152	; 0x152 <__udivmodhi4>
 13c:	07 fc       	sbrc	r0, 7
 13e:	05 d0       	rcall	.+10     	; 0x14a <__divmodhi4_neg2>
 140:	3e f4       	brtc	.+14     	; 0x150 <__divmodhi4_exit>

00000142 <__divmodhi4_neg1>:
 142:	90 95       	com	r25
 144:	81 95       	neg	r24
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	08 95       	ret

0000014a <__divmodhi4_neg2>:
 14a:	70 95       	com	r23
 14c:	61 95       	neg	r22
 14e:	7f 4f       	sbci	r23, 0xFF	; 255

00000150 <__divmodhi4_exit>:
 150:	08 95       	ret

00000152 <__udivmodhi4>:
 152:	aa 1b       	sub	r26, r26
 154:	bb 1b       	sub	r27, r27
 156:	51 e1       	ldi	r21, 0x11	; 17
 158:	07 c0       	rjmp	.+14     	; 0x168 <__udivmodhi4_ep>

0000015a <__udivmodhi4_loop>:
 15a:	aa 1f       	adc	r26, r26
 15c:	bb 1f       	adc	r27, r27
 15e:	a6 17       	cp	r26, r22
 160:	b7 07       	cpc	r27, r23
 162:	10 f0       	brcs	.+4      	; 0x168 <__udivmodhi4_ep>
 164:	a6 1b       	sub	r26, r22
 166:	b7 0b       	sbc	r27, r23

00000168 <__udivmodhi4_ep>:
 168:	88 1f       	adc	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	5a 95       	dec	r21
 16e:	a9 f7       	brne	.-22     	; 0x15a <__udivmodhi4_loop>
 170:	80 95       	com	r24
 172:	90 95       	com	r25
 174:	bc 01       	movw	r22, r24
 176:	cd 01       	movw	r24, r26
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
