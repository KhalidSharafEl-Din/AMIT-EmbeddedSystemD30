
AutoConter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000218  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bf  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d7  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c8  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  8a:	0c 94 0a 01 	jmp	0x214	; 0x214 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
#define DELAY 100

int num = 0;

ISR (TIMER1_OVF_vect)		// Timer1 ISR
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	num++;
  a0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  a4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
  ae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	if(num > 99) num=0;		// Increment the number
  b2:	84 36       	cpi	r24, 0x64	; 100
  b4:	91 05       	cpc	r25, r1
  b6:	24 f0       	brlt	.+8      	; 0xc0 <__vector_9+0x2e>
  b8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
  bc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	TCNT1 = 57723;			// for 0.5 sec at 16 MHz >> TCNT1 = 65536 -(Delay_Seconds * F_CPU)/ scaler
  c0:	8b e7       	ldi	r24, 0x7B	; 123
  c2:	91 ee       	ldi	r25, 0xE1	; 225
  c4:	9d bd       	out	0x2d, r25	; 45
  c6:	8c bd       	out	0x2c, r24	; 44
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:

int main(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	64 97       	sbiw	r28, 0x14	; 20
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
    DDRC	= 0b01111111;		// 7Seg Pins as OUTPUT
  ea:	8f e7       	ldi	r24, 0x7F	; 127
  ec:	84 bb       	out	0x14, r24	; 20
	DDRD	= 0b00000011;		// Enable Pins as OUTPUT
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	81 bb       	out	0x11, r24	; 17
	
	TCNT1 = 57723;						// for 0.5 sec at 16 MHz
  f2:	8b e7       	ldi	r24, 0x7B	; 123
  f4:	91 ee       	ldi	r25, 0xE1	; 225
  f6:	9d bd       	out	0x2d, r25	; 45
  f8:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
  fa:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<CS10) | (1<<CS12);;	// Timer mode with 1024 pre-scaler
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1) ;				// Enable timer1 overflow interrupt(TOIE1)
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	89 bf       	out	0x39, r24	; 57
	//sei();								// Enable Global interrupts
	
	int arr[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x7,0x7F,0x6F};
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	e0 e6       	ldi	r30, 0x60	; 96
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	de 01       	movw	r26, r28
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	41 ee       	ldi	r20, 0xE1	; 225
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	40 40       	sbci	r20, 0x00	; 0
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x46>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x50>
 126:	00 00       	nop
	_delay_ms(DELAY);
    while (1) 
    {
		PORTD = 0b00000001;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	82 bb       	out	0x12, r24	; 18
		PORTC = arr[(num%10)];	// Write the Ones on the first 7Seg
 12c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 130:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 134:	2a e0       	ldi	r18, 0x0A	; 10
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	b9 01       	movw	r22, r18
 13a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divmodhi4>
 13e:	fc 01       	movw	r30, r24
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	8c 0f       	add	r24, r28
 14a:	9d 1f       	adc	r25, r29
 14c:	e8 0f       	add	r30, r24
 14e:	f9 1f       	adc	r31, r25
 150:	80 81       	ld	r24, Z
 152:	85 bb       	out	0x15, r24	; 21
 154:	9f ef       	ldi	r25, 0xFF	; 255
 156:	40 e7       	ldi	r20, 0x70	; 112
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	91 50       	subi	r25, 0x01	; 1
 15c:	40 40       	sbci	r20, 0x00	; 0
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x84>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x8e>
 164:	00 00       	nop
		_delay_ms(50);
		PORTD = 0b00000010;			// Write the Tens on the second 7Seg
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	82 bb       	out	0x12, r24	; 18
		PORTC = arr[(num/10)];
 16a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 16e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 172:	b9 01       	movw	r22, r18
 174:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__divmodhi4>
 178:	fb 01       	movw	r30, r22
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	8c 0f       	add	r24, r28
 184:	9d 1f       	adc	r25, r29
 186:	e8 0f       	add	r30, r24
 188:	f9 1f       	adc	r31, r25
 18a:	80 81       	ld	r24, Z
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	9f ef       	ldi	r25, 0xFF	; 255
 190:	20 e7       	ldi	r18, 0x70	; 112
 192:	42 e0       	ldi	r20, 0x02	; 2
 194:	91 50       	subi	r25, 0x01	; 1
 196:	20 40       	sbci	r18, 0x00	; 0
 198:	40 40       	sbci	r20, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xbe>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xc8>
 19e:	00 00       	nop
		_delay_ms(50);				// This Delay is set to reduce the interference between them
		
		num++;
 1a0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 1a4:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 1ae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		if(num > 99) num=0;
 1b2:	84 36       	cpi	r24, 0x64	; 100
 1b4:	91 05       	cpc	r25, r1
 1b6:	0c f4       	brge	.+2      	; 0x1ba <main+0xe4>
 1b8:	b7 cf       	rjmp	.-146    	; 0x128 <main+0x52>
 1ba:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 1be:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
 1c2:	b2 cf       	rjmp	.-156    	; 0x128 <main+0x52>

000001c4 <__divmodhi4>:
 1c4:	97 fb       	bst	r25, 7
 1c6:	07 2e       	mov	r0, r23
 1c8:	16 f4       	brtc	.+4      	; 0x1ce <__divmodhi4+0xa>
 1ca:	00 94       	com	r0
 1cc:	07 d0       	rcall	.+14     	; 0x1dc <__divmodhi4_neg1>
 1ce:	77 fd       	sbrc	r23, 7
 1d0:	09 d0       	rcall	.+18     	; 0x1e4 <__divmodhi4_neg2>
 1d2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__udivmodhi4>
 1d6:	07 fc       	sbrc	r0, 7
 1d8:	05 d0       	rcall	.+10     	; 0x1e4 <__divmodhi4_neg2>
 1da:	3e f4       	brtc	.+14     	; 0x1ea <__divmodhi4_exit>

000001dc <__divmodhi4_neg1>:
 1dc:	90 95       	com	r25
 1de:	81 95       	neg	r24
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	08 95       	ret

000001e4 <__divmodhi4_neg2>:
 1e4:	70 95       	com	r23
 1e6:	61 95       	neg	r22
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255

000001ea <__divmodhi4_exit>:
 1ea:	08 95       	ret

000001ec <__udivmodhi4>:
 1ec:	aa 1b       	sub	r26, r26
 1ee:	bb 1b       	sub	r27, r27
 1f0:	51 e1       	ldi	r21, 0x11	; 17
 1f2:	07 c0       	rjmp	.+14     	; 0x202 <__udivmodhi4_ep>

000001f4 <__udivmodhi4_loop>:
 1f4:	aa 1f       	adc	r26, r26
 1f6:	bb 1f       	adc	r27, r27
 1f8:	a6 17       	cp	r26, r22
 1fa:	b7 07       	cpc	r27, r23
 1fc:	10 f0       	brcs	.+4      	; 0x202 <__udivmodhi4_ep>
 1fe:	a6 1b       	sub	r26, r22
 200:	b7 0b       	sbc	r27, r23

00000202 <__udivmodhi4_ep>:
 202:	88 1f       	adc	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	5a 95       	dec	r21
 208:	a9 f7       	brne	.-22     	; 0x1f4 <__udivmodhi4_loop>
 20a:	80 95       	com	r24
 20c:	90 95       	com	r25
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>
